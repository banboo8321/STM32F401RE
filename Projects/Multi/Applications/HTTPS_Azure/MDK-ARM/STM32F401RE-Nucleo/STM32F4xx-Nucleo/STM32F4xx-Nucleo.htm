<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F4xx-Nucleo\STM32F4xx-Nucleo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F4xx-Nucleo\STM32F4xx-Nucleo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Feb 10 13:22:05 2017
<BR><P>
<H3>Maximum Stack Usage =       4872 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
IoTHubTransportHttp_DoWork &rArr; DoMessages &rArr; abandonOrAcceptMessage &rArr; HTTPAPIEX_SAS_ExecuteRequest &rArr; HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[113]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">ADC_IRQHandler</a><BR>
 <LI><a href="#[fb]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fb]">BusFault_Handler</a><BR>
 <LI><a href="#[f9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">HardFault_Handler</a><BR>
 <LI><a href="#[fa]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fa]">MemManage_Handler</a><BR>
 <LI><a href="#[fc]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">UsageFault_Handler</a><BR>
 <LI><a href="#[3cf]">NDEF_IdentifySPRecord</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ce]">NDEF_ParseRecordHeader</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[113]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fb]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10c]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10d]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10e]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10f]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[110]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[111]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[112]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[127]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[131]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[132]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[133]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fe]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[107]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[124]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[108]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[109]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10a]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10b]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[114]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[105]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[137]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">HTS221_H_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[3]">HTS221_H_DeInit</a> from hts221_driver_hl.o(i.HTS221_H_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[e]">HTS221_H_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[8]">HTS221_H_Get_Hum</a> from hts221_driver_hl.o(i.HTS221_H_Get_Hum) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[9]">HTS221_H_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[6]">HTS221_H_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[2]">HTS221_H_Init</a> from hts221_driver_hl.o(i.HTS221_H_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[c]">HTS221_H_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[5]">HTS221_H_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[4]">HTS221_H_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[a]">HTS221_H_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[b]">HTS221_H_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[d]">HTS221_H_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14]">HTS221_T_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[10]">HTS221_T_DeInit</a> from hts221_driver_hl.o(i.HTS221_T_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1b]">HTS221_T_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[16]">HTS221_T_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[15]">HTS221_T_Get_Temp</a> from hts221_driver_hl.o(i.HTS221_T_Get_Temp) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[13]">HTS221_T_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[f]">HTS221_T_Init</a> from hts221_driver_hl.o(i.HTS221_T_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19]">HTS221_T_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[12]">HTS221_T_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[11]">HTS221_T_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17]">HTS221_T_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[18]">HTS221_T_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1a]">HTS221_T_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14b]">HTTP_Protocol</a> from iothubtransporthttp.o(i.HTTP_Protocol) referenced from iothub_client_sample_http.o(i.iothub_client_sample_http_run)
 <LI><a href="#[f9]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11d]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11c]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11f]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11e]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[136]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[135]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[de]">IIS2DH_Check_WhoAmI</a> from iis2dh_driver_hl.o(i.IIS2DH_Check_WhoAmI) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d7]">IIS2DH_ClearDRDY</a> from iis2dh_driver_hl.o(i.IIS2DH_ClearDRDY) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[da]">IIS2DH_DeInit</a> from iis2dh_driver_hl.o(i.IIS2DH_DeInit) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d6]">IIS2DH_Disable_HP_Filter</a> from iis2dh_driver_hl.o(i.IIS2DH_Disable_HP_Filter) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d5]">IIS2DH_Enable_HP_Filter</a> from iis2dh_driver_hl.o(i.IIS2DH_Enable_HP_Filter) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d3]">IIS2DH_Get_Active_Axis</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_Active_Axis) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[df]">IIS2DH_Get_Axes</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_Axes) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e0]">IIS2DH_Get_AxesRaw</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_AxesRaw) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d0]">IIS2DH_Get_AxesSuperRaw</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_AxesSuperRaw) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e8]">IIS2DH_Get_Axes_Status</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_Axes_Status) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[ec]">IIS2DH_Get_DRDY_Status</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_DRDY_Status) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e5]">IIS2DH_Get_FS</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_FS) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e2]">IIS2DH_Get_ODR</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_ODR) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d1]">IIS2DH_Get_OpMode</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_OpMode) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e1]">IIS2DH_Get_Sensitivity</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_Sensitivity) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[dd]">IIS2DH_Get_WhoAmI</a> from iis2dh_driver_hl.o(i.IIS2DH_Get_WhoAmI) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d9]">IIS2DH_Init</a> from iis2dh_driver_hl.o(i.IIS2DH_Init) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[ea]">IIS2DH_Read_Reg</a> from iis2dh_driver_hl.o(i.IIS2DH_Read_Reg) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[dc]">IIS2DH_Sensor_Disable</a> from iis2dh_driver_hl.o(i.IIS2DH_Sensor_Disable) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[db]">IIS2DH_Sensor_Enable</a> from iis2dh_driver_hl.o(i.IIS2DH_Sensor_Enable) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d4]">IIS2DH_Set_Active_Axis</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_Active_Axis) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e9]">IIS2DH_Set_Axes_Status</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_Axes_Status) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e6]">IIS2DH_Set_FS</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_FS) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e7]">IIS2DH_Set_FS_Value</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_FS_Value) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d8]">IIS2DH_Set_INT1_DRDY</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_INT1_DRDY) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e3]">IIS2DH_Set_ODR</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_ODR) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[e4]">IIS2DH_Set_ODR_Value</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_ODR_Value) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[d2]">IIS2DH_Set_OpMode</a> from iis2dh_driver_hl.o(i.IIS2DH_Set_OpMode) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[eb]">IIS2DH_Write_Reg</a> from iis2dh_driver_hl.o(i.IIS2DH_Write_Reg) referenced 2 times from iis2dh_driver_hl.o(.data)
 <LI><a href="#[ef]">IoTHubTransportHttp_Create</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_Create) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f0]">IoTHubTransportHttp_Destroy</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_Destroy) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f5]">IoTHubTransportHttp_DoWork</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_DoWork) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[ed]">IoTHubTransportHttp_GetHostname</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_GetHostname) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f6]">IoTHubTransportHttp_GetSendStatus</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_GetSendStatus) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f1]">IoTHubTransportHttp_Register</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_Register) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[ee]">IoTHubTransportHttp_SetOption</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_SetOption) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f3]">IoTHubTransportHttp_Subscribe</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_Subscribe) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f2]">IoTHubTransportHttp_Unregister</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_Unregister) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[f4]">IoTHubTransportHttp_Unsubscribe</a> from iothubtransporthttp.o(i.IoTHubTransportHttp_Unsubscribe) referenced 2 times from iothubtransporthttp.o(.data)
 <LI><a href="#[3d]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[36]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[39]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[37]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3e]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3c]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[38]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[40]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[44]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[43]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3f]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[41]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3a]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3b]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[42]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[21]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1d]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[28]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[23]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[22]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[20]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1c]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[26]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1f]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1e]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[24]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[25]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[27]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2e]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2a]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[35]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[30]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2f]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2d]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[29]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[33]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2c]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2b]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[31]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[32]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[34]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[c3]">LSM303AGR_M_Check_WhoAmI</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Check_WhoAmI) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[bf]">LSM303AGR_M_DeInit</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_DeInit) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c4]">LSM303AGR_M_Get_Axes</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c5]">LSM303AGR_M_Get_AxesRaw</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_AxesRaw) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[cf]">LSM303AGR_M_Get_DRDY_Status</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_DRDY_Status) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[ca]">LSM303AGR_M_Get_FS</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_FS) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c7]">LSM303AGR_M_Get_ODR</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_ODR) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c6]">LSM303AGR_M_Get_Sensitivity</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Sensitivity) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c2]">LSM303AGR_M_Get_WhoAmI</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_WhoAmI) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[be]">LSM303AGR_M_Init</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Init) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[cd]">LSM303AGR_M_Read_Reg</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Read_Reg) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c1]">LSM303AGR_M_Sensor_Disable</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Disable) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c0]">LSM303AGR_M_Sensor_Enable</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Enable) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[cb]">LSM303AGR_M_Set_FS</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[cc]">LSM303AGR_M_Set_FS_Value</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS_Value) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c8]">LSM303AGR_M_Set_ODR</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[c9]">LSM303AGR_M_Set_ODR_Value</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR_Value) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[ce]">LSM303AGR_M_Write_Reg</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Write_Reg) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[af]">LSM303AGR_X_Check_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a8]">LSM303AGR_X_ClearDRDY</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_ClearDRDY) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[ab]">LSM303AGR_X_DeInit</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a7]">LSM303AGR_X_Disable_HP_Filter</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Disable_HP_Filter) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a6]">LSM303AGR_X_Enable_HP_Filter</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Enable_HP_Filter) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a4]">LSM303AGR_X_Get_Active_Axis</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Active_Axis) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b0]">LSM303AGR_X_Get_Axes</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b1]">LSM303AGR_X_Get_AxesRaw</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a1]">LSM303AGR_X_Get_AxesSuperRaw</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesSuperRaw) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b9]">LSM303AGR_X_Get_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[bd]">LSM303AGR_X_Get_DRDY_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b6]">LSM303AGR_X_Get_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b3]">LSM303AGR_X_Get_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a2]">LSM303AGR_X_Get_OpMode</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_OpMode) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b2]">LSM303AGR_X_Get_Sensitivity</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[ae]">LSM303AGR_X_Get_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[aa]">LSM303AGR_X_Init</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[bb]">LSM303AGR_X_Read_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[ad]">LSM303AGR_X_Sensor_Disable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[ac]">LSM303AGR_X_Sensor_Enable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a5]">LSM303AGR_X_Set_Active_Axis</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Active_Axis) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[ba]">LSM303AGR_X_Set_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b7]">LSM303AGR_X_Set_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b8]">LSM303AGR_X_Set_FS_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a9]">LSM303AGR_X_Set_INT1_DRDY</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_INT1_DRDY) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b4]">LSM303AGR_X_Set_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[b5]">LSM303AGR_X_Set_ODR_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a3]">LSM303AGR_X_Set_OpMode</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_OpMode) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[bc]">LSM303AGR_X_Write_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[7a]">LSM6DSL_FIFO_G_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[79]">LSM6DSL_FIFO_G_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6f]">LSM6DSL_FIFO_Get_Data</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6c]">LSM6DSL_FIFO_Get_Empty_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6b]">LSM6DSL_FIFO_Get_Full_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[70]">LSM6DSL_FIFO_Get_Num_Of_Samples</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6d]">LSM6DSL_FIFO_Get_Overrun_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6e]">LSM6DSL_FIFO_Get_Pattern</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[74]">LSM6DSL_FIFO_Set_INT1_FIFO_Full</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[73]">LSM6DSL_FIFO_Set_Mode</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6a]">LSM6DSL_FIFO_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[76]">LSM6DSL_FIFO_Set_Stop_On_Fth</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[75]">LSM6DSL_FIFO_Set_Watermark_Level</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[72]">LSM6DSL_FIFO_X_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[71]">LSM6DSL_FIFO_X_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[94]">LSM6DSL_G_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[90]">LSM6DSL_G_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[95]">LSM6DSL_G_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[96]">LSM6DSL_G_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a0]">LSM6DSL_G_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9b]">LSM6DSL_G_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[98]">LSM6DSL_G_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[97]">LSM6DSL_G_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[93]">LSM6DSL_G_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8f]">LSM6DSL_G_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9e]">LSM6DSL_G_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[92]">LSM6DSL_G_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[91]">LSM6DSL_G_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9c]">LSM6DSL_G_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9d]">LSM6DSL_G_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7b]">LSM6DSL_G_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[99]">LSM6DSL_G_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9a]">LSM6DSL_G_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7c]">LSM6DSL_G_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9f]">LSM6DSL_G_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[82]">LSM6DSL_X_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7e]">LSM6DSL_X_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[62]">LSM6DSL_X_Disable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5b]">LSM6DSL_X_Disable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[46]">LSM6DSL_X_Disable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4a]">LSM6DSL_X_Disable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[58]">LSM6DSL_X_Disable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4e]">LSM6DSL_X_Disable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[51]">LSM6DSL_X_Disable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[54]">LSM6DSL_X_Disable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[61]">LSM6DSL_X_Enable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5a]">LSM6DSL_X_Enable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[45]">LSM6DSL_X_Enable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[49]">LSM6DSL_X_Enable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[57]">LSM6DSL_X_Enable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4d]">LSM6DSL_X_Enable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[50]">LSM6DSL_X_Enable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[53]">LSM6DSL_X_Enable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[63]">LSM6DSL_X_Get_6D_Orientation_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[65]">LSM6DSL_X_Get_6D_Orientation_XH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[64]">LSM6DSL_X_Get_6D_Orientation_XL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[67]">LSM6DSL_X_Get_6D_Orientation_YH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[66]">LSM6DSL_X_Get_6D_Orientation_YL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[69]">LSM6DSL_X_Get_6D_Orientation_ZH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[68]">LSM6DSL_X_Get_6D_Orientation_ZL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[83]">LSM6DSL_X_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[84]">LSM6DSL_X_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8e]">LSM6DSL_X_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5c]">LSM6DSL_X_Get_Double_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[89]">LSM6DSL_X_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[47]">LSM6DSL_X_Get_Free_Fall_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[86]">LSM6DSL_X_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4b]">LSM6DSL_X_Get_Pedometer_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[85]">LSM6DSL_X_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[59]">LSM6DSL_X_Get_Single_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4c]">LSM6DSL_X_Get_Step_Count</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[52]">LSM6DSL_X_Get_Tilt_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[55]">LSM6DSL_X_Get_Wake_Up_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[81]">LSM6DSL_X_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7d]">LSM6DSL_X_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8c]">LSM6DSL_X_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[80]">LSM6DSL_X_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7f]">LSM6DSL_X_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8a]">LSM6DSL_X_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8b]">LSM6DSL_X_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[48]">LSM6DSL_X_Set_Free_Fall_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[77]">LSM6DSL_X_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[87]">LSM6DSL_X_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[88]">LSM6DSL_X_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4f]">LSM6DSL_X_Set_Pedometer_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[78]">LSM6DSL_X_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[60]">LSM6DSL_X_Set_Tap_Duration_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5f]">LSM6DSL_X_Set_Tap_Quiet_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5e]">LSM6DSL_X_Set_Tap_Shock_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5d]">LSM6DSL_X_Set_Tap_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[56]">LSM6DSL_X_Set_Wake_Up_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8d]">LSM6DSL_X_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fa]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f8]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[130]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[126]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[102]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[ff]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[106]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[125]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[104]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[145]">RTOSTaskGeneric</a> from threadapi_stm32cube.o(i.RTOSTaskGeneric) referenced from threadapi_stm32cube.o(i.ThreadAPI_Initialize)
 <LI><a href="#[14c]">ReceiveMessageCallback</a> from iothub_client_sample_http.o(i.ReceiveMessageCallback) referenced from iothub_client_sample_http.o(i.iothub_client_sample_http_run)
 <LI><a href="#[f7]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[128]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[120]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[121]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12a]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[138]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fd]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[14d]">SendConfirmationCallback</a> from iothub_client_sample_http.o(i.SendConfirmationCallback) referenced from iothub_client_sample_http.o(i.iothub_client_sample_http_run)
 <LI><a href="#[100]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13a]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[103]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[115]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[118]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[117]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[116]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[119]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11a]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11b]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[129]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[122]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[123]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[134]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fc]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[143]">ValidateAsciiCharactersFilter</a> from iothub_message.o(i.ValidateAsciiCharactersFilter) referenced from iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
 <LI><a href="#[101]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[141]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[13b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[13d]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[13e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[13c]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[147]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[147]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[148]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[140]">fgetc</a> from console.o(i.fgetc) referenced from scanf_char_file.o(.text)
 <LI><a href="#[144]">findDeviceById</a> from iothubtransporthttp.o(i.findDeviceById) referenced from iothubtransporthttp.o(i.IoTHubTransportHttp_Register)
 <LI><a href="#[14a]">findDeviceHandle</a> from iothubtransporthttp.o(i.findDeviceHandle) referenced from iothubtransporthttp.o(i.get_perDeviceDataItem)
 <LI><a href="#[146]">fputc</a> from console.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[150]">iothub_client_sample_http_run</a> from iothub_client_sample_http.o(i.iothub_client_sample_http_run) referenced from main.o(.constdata)
 <LI><a href="#[13f]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[139]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[14f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[14e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[149]">sameName</a> from httpapiex.o(i.sameName) referenced from httpapiex.o(i.createOrUpdateOption)
 <LI><a href="#[142]">taskWiFiReceiveData</a> from socketos.o(i.taskWiFiReceiveData) referenced from socketos.o(i.InternetAdapterCallbackSocketReceive)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[13b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[4aa]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[151]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4ab]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4ac]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4ad]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4ae]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4af]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[fd]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4a0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[49f]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ff]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b0]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[f7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4b1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[13f]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[4b2]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[159]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[15b]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ctime
</UL>

<P><STRONG><a name="[4b3]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillWifiTokenStruct
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_build
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterCallbackSocketReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterInitialize
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_AP_settings
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[418]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
</UL>

<P><STRONG><a name="[4b4]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4b6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationNTPStart
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IIS2DH_ACCELERO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[2cc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Initialize
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterCallbackSocketReceive
</UL>

<P><STRONG><a name="[4b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[290]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
</UL>

<P><STRONG><a name="[285]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[1ed]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1b0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_AP_settings
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_WiFi_SecKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloneOption
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_JSON
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterInitialize
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationNTPStart
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_Properties
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[27b]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloneOption
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sameName
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterInitialize
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDeviceById
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_SetOption
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[3d1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUriType
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseMediaType
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[1c6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteURLtoNFC
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloneOption
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationNTPStart
</UL>

<P><STRONG><a name="[1ec]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[161]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[163]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[164]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterInitialize
</UL>

<P><STRONG><a name="[166]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_AP_settings
</UL>

<P><STRONG><a name="[168]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[16a]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[17d]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[16f]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4b9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4ba]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4bb]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[15c]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[15a]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[15d]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[16b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[169]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[13c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[167]"></a>__vfscanf_char_file</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[4bc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[172]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[152]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4bd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>_fgetc$bs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[4bf]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>ActivateWiFi</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.ActivateWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ActivateWiFi &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterStart
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>BSP_ACCELERO_Get_Axes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyro_Sensor_Handler
</UL>

<P><STRONG><a name="[186]"></a>BSP_ACCELERO_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_ACCELERO_Init &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IIS2DH_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[477]"></a>BSP_ACCELERO_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[180]"></a>BSP_GYRO_Get_Axes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyro_Sensor_Handler
</UL>

<P><STRONG><a name="[18a]"></a>BSP_GYRO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_GYRO_Init &rArr; BSP_LSM6DSL_GYRO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[478]"></a>BSP_GYRO_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[294]"></a>BSP_HUMIDITY_Get_Hum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumTemp_Sensor_Handler
</UL>

<P><STRONG><a name="[18f]"></a>BSP_HUMIDITY_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_HUMIDITY_Init &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[293]"></a>BSP_HUMIDITY_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumTemp_Sensor_Handler
</UL>

<P><STRONG><a name="[47a]"></a>BSP_HUMIDITY_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[191]"></a>BSP_LED_Init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[194]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_led
</UL>

<P><STRONG><a name="[195]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
</UL>

<P><STRONG><a name="[19c]"></a>BSP_MAGNETO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_MAGNETO_Init &rArr; BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[479]"></a>BSP_MAGNETO_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[19d]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
</UL>

<P><STRONG><a name="[19f]"></a>BSP_PB_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
</UL>

<P><STRONG><a name="[1a2]"></a>BSP_PRESSURE_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_PRESSURE_Init &rArr; BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[47c]"></a>BSP_PRESSURE_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[292]"></a>BSP_TEMPERATURE_Get_Temp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumTemp_Sensor_Handler
</UL>

<P><STRONG><a name="[1a3]"></a>BSP_TEMPERATURE_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_TEMPERATURE_Init &rArr; BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[291]"></a>BSP_TEMPERATURE_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumTemp_Sensor_Handler
</UL>

<P><STRONG><a name="[47b]"></a>BSP_TEMPERATURE_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1a4]"></a>BUFFER_build</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BUFFER_build &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1a8]"></a>BUFFER_clone</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[1b4]"></a>BUFFER_content</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_content))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode
</UL>

<P><STRONG><a name="[1a9]"></a>BUFFER_create</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[1aa]"></a>BUFFER_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildAllRequests
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[1ab]"></a>BUFFER_enlarge</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_enlarge))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
</UL>

<P><STRONG><a name="[1e7]"></a>BUFFER_length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_length))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>

<P><STRONG><a name="[1ac]"></a>BUFFER_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BUFFER_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildBufferIfNotExist
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1ad]"></a>BUFFER_pre_build</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_pre_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
</UL>

<P><STRONG><a name="[1b5]"></a>BUFFER_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_size))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode
</UL>

<P><STRONG><a name="[1b1]"></a>BUFFER_u_char</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_u_char))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>

<P><STRONG><a name="[1ae]"></a>BUFFER_unbuild</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_unbuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BUFFER_unbuild &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[1af]"></a>Base64_Decoder</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, base64.o(i.Base64_Decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Base64_Decoder &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
</UL>

<P><STRONG><a name="[1b3]"></a>Base64_Encode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, base64.o(i.Base64_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Base64_Encode &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_size
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_content
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
</UL>

<P><STRONG><a name="[1b7]"></a>Base64_Encode_Bytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, base64.o(i.Base64_Encode_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Base64_Encode_Bytes &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
</UL>

<P><STRONG><a name="[fb]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>CheckAzureIOTConfigurationParameters</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.CheckAzureIOTConfigurationParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckAzureIOTConfigurationParameters &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>ComposeMessageSensors</STRONG> (Thumb, 246 bytes, Stack size 104 bytes, platform_stm32cube.o(i.ComposeMessageSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ComposeMessageSensors &rArr; Get_MAC_Add &rArr; GET_Configuration_Value &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MAC_Add
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumTemp_Sensor_Handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyro_Sensor_Handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[1c2]"></a>ConfigAPSettings</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, main.o(i.ConfigAPSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ConfigAPSettings &rArr; WriteURLtoNFC &rArr; TT4_WriteURI &rArr; NDEF_WriteURI &rArr; M24SR_WriteData &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_AP_settings
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteURLtoNFC
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSSIDPasswordToMemory
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiTokenFromNFC
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCallSSIDPasswordFromMemory
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[494]"></a>DList_AppendTailList</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_AppendTailList))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reversePutListBackIn
</UL>

<P><STRONG><a name="[2e3]"></a>DList_InitializeListHead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InitializeListHead))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reversePutListBackIn
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
</UL>

<P><STRONG><a name="[1d6]"></a>DList_InsertTailList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InsertTailList))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[1ca]"></a>DList_IsListEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_IsListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_GetSendStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[2ed]"></a>DList_RemoveEntryList</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveEntryList))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reversePutListBackIn
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
</UL>

<P><STRONG><a name="[1d5]"></a>DList_RemoveHeadList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveHeadList))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
</UL>

<P><STRONG><a name="[fe]"></a>DebugMon_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f4]"></a>Error_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifi_module.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; Receive_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_ErrorCallback
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
</UL>

<P><STRONG><a name="[1ff]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[200]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1f6]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1f9]"></a>GET_Configuration_Value</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wifi_module.o(i.GET_Configuration_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GET_Configuration_Value &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MAC_Add
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterRealConnectionProcedure
</UL>

<P><STRONG><a name="[1c1]"></a>Get_MAC_Add</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, main.o(i.Get_MAC_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Get_MAC_Add &rArr; GET_Configuration_Value &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
</UL>

<P><STRONG><a name="[185]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterStart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNFC
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateWiFi
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterRealConnectionProcedure
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSSIDPasswordInMemory
</UL>

<P><STRONG><a name="[3f0]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSSIDPasswordToMemory
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSSIDPasswordInMemory
</UL>

<P><STRONG><a name="[201]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSSIDPasswordToMemory
</UL>

<P><STRONG><a name="[3ef]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSSIDPasswordToMemory
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSSIDPasswordInMemory
</UL>

<P><STRONG><a name="[245]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
</UL>

<P><STRONG><a name="[206]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_GPIO_Init</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Msg_Gpio_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPOInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakeup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_Sensor_IO_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_IO_ITConfig
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[19e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPO_ReadPin
</UL>

<P><STRONG><a name="[193]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakeup
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_led
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiTokenFromNFC
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[207]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[297]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[209]"></a>HAL_I2C_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[20e]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
</UL>

<P><STRONG><a name="[211]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
</UL>

<P><STRONG><a name="[215]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[217]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[208]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[20a]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[427]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[219]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
</UL>

<P><STRONG><a name="[21b]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[21c]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_msp_template.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[244]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_Sensor_IO_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_IO_ITConfig
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_Sensor_IO_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_IO_ITConfig
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[21a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[493]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_board
</UL>

<P><STRONG><a name="[220]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[221]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[21d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[20b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[223]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[222]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[224]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 722 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
</UL>

<P><STRONG><a name="[1be]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
</UL>

<P><STRONG><a name="[226]"></a>HAL_RTC_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemInitialize
</UL>

<P><STRONG><a name="[227]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[229]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
</UL>

<P><STRONG><a name="[22c]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
</UL>

<P><STRONG><a name="[22b]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[42a]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[21e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[235]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[22d]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
</UL>

<P><STRONG><a name="[22e]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[43e]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[231]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[230]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[232]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[233]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[236]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>HAL_UART_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[23b]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_ErrorCallback &rArr; WiFi_HAL_UART_ErrorCallback &rArr; Error_Handler &rArr; Receive_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[23d]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[241]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[23a]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[242]"></a>HAL_UART_MspInit</STRONG> (Thumb, 226 bytes, Stack size 112 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[246]"></a>HAL_UART_Receive</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReceiveChar
</UL>

<P><STRONG><a name="[3ed]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>

<P><STRONG><a name="[248]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[24a]"></a>HAL_UART_Transmit</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReceiveChar
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
</UL>

<P><STRONG><a name="[240]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[24c]"></a>HMACSHA256_ComputeHash</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hmacsha256.o(i.HMACSHA256_ComputeHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
</UL>

<P><STRONG><a name="[24e]"></a>HTS221_Activate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>

<P><STRONG><a name="[253]"></a>HTS221_DeActivate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[254]"></a>HTS221_Get_DataStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_DRDY_Status
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_DRDY_Status
</UL>

<P><STRONG><a name="[255]"></a>HTS221_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>

<P><STRONG><a name="[256]"></a>HTS221_Get_Humidity</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, hts221_driver.o(i.HTS221_Get_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[258]"></a>HTS221_Get_Odr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>

<P><STRONG><a name="[259]"></a>HTS221_Get_Temperature</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, hts221_driver.o(i.HTS221_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[24f]"></a>HTS221_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[261]"></a>HTS221_Set_BduMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_BduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Set_BduMode &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[264]"></a>HTS221_Set_Odr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>

<P><STRONG><a name="[250]"></a>HTS221_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[263]"></a>HTS221_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hts221_driver.o(i.HTS221_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTS221_assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
</UL>

<P><STRONG><a name="[266]"></a>HTTPAPIEX_Create</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, httpapiex.o(i.HTTPAPIEX_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HTTPAPIEX_Create &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
</UL>

<P><STRONG><a name="[268]"></a>HTTPAPIEX_Destroy</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, httpapiex.o(i.HTTPAPIEX_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HTTPAPIEX_Destroy &rArr; HTTPAPI_CloseConnection &rArr; InternetInterfaceSocketClose &rArr; SocketMappingCloseConnection &rArr; InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_Deinit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloseConnection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_httpApiExHandle
</UL>

<P><STRONG><a name="[1df]"></a>HTTPAPIEX_ExecuteRequest</STRONG> (Thumb, 374 bytes, Stack size 136 bytes, httpapiex.o(i.HTTPAPIEX_ExecuteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_Deinit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CreateConnection
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloseConnection
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildAllRequests
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[273]"></a>HTTPAPIEX_SAS_Create</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, httpapiexsas.o(i.HTTPAPIEX_SAS_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HTTPAPIEX_SAS_Create &rArr; STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Destroy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
</UL>

<P><STRONG><a name="[275]"></a>HTTPAPIEX_SAS_Destroy</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, httpapiexsas.o(i.HTTPAPIEX_SAS_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HTTPAPIEX_SAS_Destroy &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Create
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_SASObject
</UL>

<P><STRONG><a name="[1d0]"></a>HTTPAPIEX_SAS_ExecuteRequest</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, httpapiexsas.o(i.HTTPAPIEX_SAS_ExecuteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = HTTPAPIEX_SAS_ExecuteRequest &rArr; HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_FindHeaderValue
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_ReplaceHeaderNameValuePair
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[278]"></a>HTTPAPIEX_SetOption</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, httpapiex.o(i.HTTPAPIEX_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTTPAPIEX_SetOption &rArr; createOrUpdateOption &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloneOption
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createOrUpdateOption
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_SetOption
</UL>

<P><STRONG><a name="[279]"></a>HTTPAPI_CloneOption</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, httpapi_stm32cube.o(i.HTTPAPI_CloneOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTTPAPI_CloneOption &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SetOption
</UL>

<P><STRONG><a name="[269]"></a>HTTPAPI_CloseConnection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, httpapi_stm32cube.o(i.HTTPAPI_CloseConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HTTPAPI_CloseConnection &rArr; InternetInterfaceSocketClose &rArr; SocketMappingCloseConnection &rArr; InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketClose
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
</UL>

<P><STRONG><a name="[270]"></a>HTTPAPI_CreateConnection</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, httpapi_stm32cube.o(i.HTTPAPI_CreateConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTTPAPI_CreateConnection &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
</UL>

<P><STRONG><a name="[26a]"></a>HTTPAPI_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, httpapi_stm32cube.o(i.HTTPAPI_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
</UL>

<P><STRONG><a name="[272]"></a>HTTPAPI_ExecuteRequest</STRONG> (Thumb, 884 bytes, Stack size 4280 bytes, httpapi_stm32cube.o(i.HTTPAPI_ExecuteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_unbuild
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_content
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeaderCount
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_AddHeaderNameValuePair
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketSend
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketOpen
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketGetConnectionStatus
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceLoadCertificate
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipN
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLine
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
</UL>

<P><STRONG><a name="[26f]"></a>HTTPAPI_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, httpapi_stm32cube.o(i.HTTPAPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTTPAPI_Init &rArr; InternetInterfaceStart &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
</UL>

<P><STRONG><a name="[271]"></a>HTTPAPI_SetOption</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, httpapi_stm32cube.o(i.HTTPAPI_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTTPAPI_SetOption &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SetOption
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
</UL>

<P><STRONG><a name="[287]"></a>HTTPHeaders_AddHeaderNameValuePair</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, httpheaders.o(i.HTTPHeaders_AddHeaderNameValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTTPHeaders_AddHeaderNameValuePair &rArr; headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[1e5]"></a>HTTPHeaders_Alloc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, httpheaders.o(i.HTTPHeaders_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTTPHeaders_Alloc &rArr; Map_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildAllRequests
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1d8]"></a>HTTPHeaders_Clone</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, httpheaders.o(i.HTTPHeaders_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HTTPHeaders_Clone &rArr; Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1e6]"></a>HTTPHeaders_FindHeaderValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, httpheaders.o(i.HTTPHeaders_FindHeaderValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTTPHeaders_FindHeaderValue &rArr; Map_GetValueFromKey &rArr; findKey &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetValueFromKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1e0]"></a>HTTPHeaders_Free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, httpheaders.o(i.HTTPHeaders_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HTTPHeaders_Free &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildAllRequests
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrequestHeaders
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrequestHeaders
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1eb]"></a>HTTPHeaders_GetHeader</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, httpheaders.o(i.HTTPHeaders_GetHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HTTPHeaders_GetHeader &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1e9]"></a>HTTPHeaders_GetHeaderCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, httpheaders.o(i.HTTPHeaders_GetHeaderCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTTPHeaders_GetHeaderCount &rArr; Map_GetInternals
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1cb]"></a>HTTPHeaders_ReplaceHeaderNameValuePair</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, httpheaders.o(i.HTTPHeaders_ReplaceHeaderNameValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTTPHeaders_ReplaceHeaderNameValuePair &rArr; headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[14b]"></a>HTTP_Protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransporthttp.o(i.HTTP_Protocol))
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_sample_http.o(i.iothub_client_sample_http_run)
</UL>
<P><STRONG><a name="[f9]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[299]"></a>I2C_Global_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_Global_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[29b]"></a>IIS2DH_Clear_DRDY</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_Clear_DRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_Clear_DRDY &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ClearDRDY
</UL>

<P><STRONG><a name="[2a0]"></a>IIS2DH_GetRawAccData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_GetRawAccData &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Raw
</UL>

<P><STRONG><a name="[2a1]"></a>IIS2DH_GetSingleRawAccData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_GetSingleRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_GetSingleRawAccData &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_AxesSuperRaw
</UL>

<P><STRONG><a name="[2a9]"></a>IIS2DH_R_FS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_FS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Sensitivity
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_FS
</UL>

<P><STRONG><a name="[2aa]"></a>IIS2DH_R_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_ODR &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_ODR
</UL>

<P><STRONG><a name="[2a4]"></a>IIS2DH_R_OpMode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iis2dh_driver.o(i.IIS2DH_R_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value_When_Enabled
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value_When_Disabled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_Disable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Sensitivity
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_OpMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_ODR
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Raw
</UL>

<P><STRONG><a name="[2a2]"></a>IIS2DH_R_Select_Axis</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_Select_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_Select_Axis &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Active_Axis
</UL>

<P><STRONG><a name="[2ab]"></a>IIS2DH_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_WHO_AM_I &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_WhoAmI
</UL>

<P><STRONG><a name="[2a8]"></a>IIS2DH_R_XDataAvail</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_XDataAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_XDataAvail &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_DRDY_Status
</UL>

<P><STRONG><a name="[2a5]"></a>IIS2DH_R_XEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_XEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Status
</UL>

<P><STRONG><a name="[2a6]"></a>IIS2DH_R_YEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_YEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Status
</UL>

<P><STRONG><a name="[2a7]"></a>IIS2DH_R_ZEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_R_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_R_ZEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Status
</UL>

<P><STRONG><a name="[29c]"></a>IIS2DH_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Read_Reg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ZEN
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_YEN
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_XEN
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_Select_Axis
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_OpMode
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ODR
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_Mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_FDS
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_Cutoff
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FS
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FIFO_MODE
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_DRDY_on_INT1
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_BDU
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_ZEN
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_YEN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_XEN
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_XDataAvail
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_WHO_AM_I
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_Select_Axis
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_ODR
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_FS
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_GetSingleRawAccData
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_GetRawAccData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Clear_DRDY
</UL>

<P><STRONG><a name="[190]"></a>IIS2DH_Sensor_IO_ITConfig</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, x_nucleo_iks01a2.o(i.IIS2DH_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IIS2DH_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IIS2DH_ACCELERO_Init
</UL>

<P><STRONG><a name="[2ac]"></a>IIS2DH_W_BDU</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_BDU &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
</UL>

<P><STRONG><a name="[2b6]"></a>IIS2DH_W_DRDY_on_INT1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_DRDY_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_DRDY_on_INT1 &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_INT1_DRDY
</UL>

<P><STRONG><a name="[2ad]"></a>IIS2DH_W_FIFO_MODE</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_FIFO_MODE &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
</UL>

<P><STRONG><a name="[2b5]"></a>IIS2DH_W_FS</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_FS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_FS_Value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_FS
</UL>

<P><STRONG><a name="[29f]"></a>IIS2DH_W_HPF_Cutoff</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_HPF_Cutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_HPF_Cutoff &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Enable_HP_Filter
</UL>

<P><STRONG><a name="[29d]"></a>IIS2DH_W_HPF_FDS</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_HPF_FDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_HPF_FDS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Enable_HP_Filter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Disable_HP_Filter
</UL>

<P><STRONG><a name="[29e]"></a>IIS2DH_W_HPF_Mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_HPF_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_HPF_Mode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Enable_HP_Filter
</UL>

<P><STRONG><a name="[2ae]"></a>IIS2DH_W_ODR</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_ODR &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value_When_Enabled
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_Disable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
</UL>

<P><STRONG><a name="[2af]"></a>IIS2DH_W_OpMode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, iis2dh_driver.o(i.IIS2DH_W_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_W_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_OpMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_Enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
</UL>

<P><STRONG><a name="[2b1]"></a>IIS2DH_W_Select_Axis</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_Select_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_Select_Axis &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_Active_Axis
</UL>

<P><STRONG><a name="[2b2]"></a>IIS2DH_W_XEN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_XEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b3]"></a>IIS2DH_W_YEN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_YEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b4]"></a>IIS2DH_W_ZEN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iis2dh_driver.o(i.IIS2DH_W_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_W_ZEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b8]"></a>IIS2DH_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iis2dh_driver.o(i.IIS2DH_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IIS2DH_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Write_Reg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ZEN
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_YEN
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_XEN
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_Select_Axis
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_OpMode
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ODR
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_Mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_FDS
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_Cutoff
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FS
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FIFO_MODE
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_DRDY_on_INT1
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_BDU
</UL>

<P><STRONG><a name="[41c]"></a>IOTHUB_CLIENT_CONFIRMATION_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IOTHUB_CLIENT_CONFIRMATION_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
</UL>

<P><STRONG><a name="[2b9]"></a>InitNFC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.InitNFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = InitNFC &rArr; TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c1]"></a>InitNucleo</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.InitNucleo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = InitNucleo &rArr; USART_PRINT_MSG_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Msg_Gpio_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c7]"></a>InitWiFi</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.InitWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitWiFi &rArr; InternetInterfaceInitialize &rArr; SocketMappingInitialize &rArr; SocketOSInitialize &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemInitialize
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceInitialize
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cb]"></a>InternetAdapterCallbackSocketReceive</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, socketos.o(i.InternetAdapterCallbackSocketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InternetAdapterCallbackSocketReceive &rArr; ThreadAPI_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_data_received
</UL>

<P><STRONG><a name="[2ce]"></a>InternetAdapterInitialize</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, internetadapter.o(i.InternetAdapterInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InternetAdapterInitialize &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceInitialize
</UL>

<P><STRONG><a name="[2d2]"></a>InternetAdapterSocketCloseConnection</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, internetadapter.o(i.InternetAdapterSocketCloseConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCloseConnection
</UL>

<P><STRONG><a name="[2d4]"></a>InternetAdapterSocketOpenConnection</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, internetadapter.o(i.InternetAdapterSocketOpenConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = InternetAdapterSocketOpenConnection &rArr; wifi_socket_client_open &rArr; Queue_Client_Open_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingOpenConnection
</UL>

<P><STRONG><a name="[2d6]"></a>InternetAdapterSocketReadData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internetadapter.o(i.InternetAdapterSocketReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InternetAdapterSocketReadData &rArr; SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketOSReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingReadData
</UL>

<P><STRONG><a name="[2d8]"></a>InternetAdapterSocketWriteData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, internetadapter.o(i.InternetAdapterSocketWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InternetAdapterSocketWriteData &rArr; wifi_socket_client_write &rArr; Queue_Client_Write_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingWriteData
</UL>

<P><STRONG><a name="[183]"></a>InternetAdapterStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, internetadapter.o(i.InternetAdapterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterRealConnectionProcedure
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateWiFi
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceStart
</UL>

<P><STRONG><a name="[2ca]"></a>InternetInterfaceInitialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, internetinterface.o(i.InternetInterfaceInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InternetInterfaceInitialize &rArr; SocketMappingInitialize &rArr; SocketOSInitialize &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingInitialize
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWiFi
</UL>

<P><STRONG><a name="[27f]"></a>InternetInterfaceLoadCertificate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internetinterface.o(i.InternetInterfaceLoadCertificate))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[27c]"></a>InternetInterfaceSocketClose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internetinterface.o(i.InternetInterfaceSocketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = InternetInterfaceSocketClose &rArr; SocketMappingCloseConnection &rArr; InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCloseConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloseConnection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[27e]"></a>InternetInterfaceSocketGetConnectionStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internetinterface.o(i.InternetInterfaceSocketGetConnectionStatus))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[280]"></a>InternetInterfaceSocketOpen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, internetinterface.o(i.InternetInterfaceSocketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InternetInterfaceSocketOpen &rArr; SocketMappingOpenConnection &rArr; InternetAdapterSocketOpenConnection &rArr; wifi_socket_client_open &rArr; Queue_Client_Open_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingOpenConnection
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCheckAvailability
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[2bd]"></a>InternetInterfaceSocketReceive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internetinterface.o(i.InternetInterfaceSocketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InternetInterfaceSocketReceive &rArr; SocketMappingReadData &rArr; InternetAdapterSocketReadData &rArr; SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLine
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk
</UL>

<P><STRONG><a name="[283]"></a>InternetInterfaceSocketSend</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, internetinterface.o(i.InternetInterfaceSocketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InternetInterfaceSocketSend &rArr; SocketMappingWriteData &rArr; InternetAdapterSocketWriteData &rArr; wifi_socket_client_write &rArr; Queue_Client_Write_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingWriteData
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[28a]"></a>InternetInterfaceStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, internetinterface.o(i.InternetInterfaceStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InternetInterfaceStart &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterStart
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[3d7]"></a>IoTHubClient_GetVersionString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, version.o(i.IoTHubClient_GetVersionString))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAssemblyInformation
</UL>

<P><STRONG><a name="[2e1]"></a>IoTHubClient_LL_Create</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IoTHubClient_LL_Create &rArr; tickcounter_create &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTransportProtocol
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[2e6]"></a>IoTHubClient_LL_CreateFromConnectionString</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, iothub_client_ll.o(i.IoTHubClient_LL_CreateFromConnectionString))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IoTHubClient_LL_CreateFromConnectionString &rArr; IoTHubClient_LL_Create &rArr; tickcounter_create &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[2ea]"></a>IoTHubClient_LL_Destroy</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubClient_LL_Destroy &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[2eb]"></a>IoTHubClient_LL_DoWork</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IoTHubClient_LL_DoWork &rArr; tickcounter_get_current_ms &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[1f1]"></a>IoTHubClient_LL_MessageCallback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_MessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubClient_LL_MessageCallback &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1d1]"></a>IoTHubClient_LL_SendComplete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubClient_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[2ee]"></a>IoTHubClient_LL_SendEventAsync</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendEventAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IoTHubClient_LL_SendEventAsync &rArr; tickcounter_get_current_ms &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[46c]"></a>IoTHubClient_LL_SetMessageCallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_LL_SetMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[2f0]"></a>IoTHubClient_LL_SetOption</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_LL_SetOption &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[2ef]"></a>IoTHubMessage_Clone</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_Clone &rArr; Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[1e8]"></a>IoTHubMessage_CreateFromByteArray</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_CreateFromByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubMessage_CreateFromByteArray &rArr; BUFFER_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1f2]"></a>IoTHubMessage_Destroy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
</UL>

<P><STRONG><a name="[1d7]"></a>IoTHubMessage_GetByteArray</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[1d3]"></a>IoTHubMessage_GetContentType</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetContentType))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1de]"></a>IoTHubMessage_GetCorrelationId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetCorrelationId))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1dd]"></a>IoTHubMessage_GetMessageId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetMessageId))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1d4]"></a>IoTHubMessage_GetString</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetString))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1d9]"></a>IoTHubMessage_Properties</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_Properties))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[1f0]"></a>IoTHubMessage_SetCorrelationId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_SetCorrelationId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubMessage_SetCorrelationId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1ef]"></a>IoTHubMessage_SetMessageId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_SetMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubMessage_SetMessageId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[314]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[316]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[30b]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[30a]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[30c]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[318]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[319]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>

<P><STRONG><a name="[31a]"></a>LPS22HB_Get_RawPressure</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>

<P><STRONG><a name="[31b]"></a>LPS22HB_Get_RawTemperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>

<P><STRONG><a name="[31c]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>

<P><STRONG><a name="[315]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>

<P><STRONG><a name="[197]"></a>LPS22HB_Sensor_IO_ITConfig</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.LPS22HB_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[323]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[322]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[30d]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[30e]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[30f]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[310]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[313]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[311]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[312]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[320]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[321]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[31f]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[31e]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[32a]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>

<P><STRONG><a name="[32b]"></a>LSM303AGR_ACC_Clear_DRDY</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Clear_DRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_Clear_DRDY &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_ClearDRDY
</UL>

<P><STRONG><a name="[32d]"></a>LSM303AGR_ACC_GetSingleRawAccData</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_GetSingleRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_GetSingleRawAccData &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesSuperRaw
</UL>

<P><STRONG><a name="[32e]"></a>LSM303AGR_ACC_Get_Acceleration</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes
</UL>

<P><STRONG><a name="[332]"></a>LSM303AGR_ACC_Get_Raw_Acceleration</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Raw_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[331]"></a>LSM303AGR_ACC_R_FullScale</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_FS
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[32f]"></a>LSM303AGR_ACC_R_HiRes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[330]"></a>LSM303AGR_ACC_R_LOWPWR_EN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_LOWPWR_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[333]"></a>LSM303AGR_ACC_R_ODR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
</UL>

<P><STRONG><a name="[334]"></a>LSM303AGR_ACC_R_OpMode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_ACC_R_OpMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_OpMode
</UL>

<P><STRONG><a name="[335]"></a>LSM303AGR_ACC_R_Select_Axis</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_Select_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_Select_Axis &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Active_Axis
</UL>

<P><STRONG><a name="[336]"></a>LSM303AGR_ACC_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
</UL>

<P><STRONG><a name="[337]"></a>LSM303AGR_ACC_R_XDataAvail</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XDataAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[338]"></a>LSM303AGR_ACC_R_XEN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[339]"></a>LSM303AGR_ACC_R_YEN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[33a]"></a>LSM303AGR_ACC_R_ZEN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[32c]"></a>LSM303AGR_ACC_ReadReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Read_Reg
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_hpf_mode
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_hpf_cutoff_freq
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Select_Axis
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_OpMode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Data_Filter
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_DRDY_on_INT1
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_Select_Axis
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_OpMode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetSingleRawAccData
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Clear_DRDY
</UL>

<P><STRONG><a name="[33b]"></a>LSM303AGR_ACC_W_BlockDataUpdate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_BlockDataUpdate &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[33d]"></a>LSM303AGR_ACC_W_DRDY_on_INT1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_DRDY_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_DRDY_on_INT1 &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_INT1_DRDY
</UL>

<P><STRONG><a name="[33e]"></a>LSM303AGR_ACC_W_Data_Filter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_Data_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_Data_Filter &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Enable_HP_Filter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Disable_HP_Filter
</UL>

<P><STRONG><a name="[33f]"></a>LSM303AGR_ACC_W_FifoMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_FifoMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[340]"></a>LSM303AGR_ACC_W_FullScale</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS_Value
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
</UL>

<P><STRONG><a name="[341]"></a>LSM303AGR_ACC_W_ODR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[342]"></a>LSM303AGR_ACC_W_OpMode</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_ACC_W_OpMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_OpMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[343]"></a>LSM303AGR_ACC_W_Select_Axis</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_Select_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_Select_Axis &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Active_Axis
</UL>

<P><STRONG><a name="[344]"></a>LSM303AGR_ACC_W_XEN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[345]"></a>LSM303AGR_ACC_W_YEN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[346]"></a>LSM303AGR_ACC_W_ZEN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[347]"></a>LSM303AGR_ACC_W_hpf_cutoff_freq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_hpf_cutoff_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_hpf_cutoff_freq &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Enable_HP_Filter
</UL>

<P><STRONG><a name="[348]"></a>LSM303AGR_ACC_W_hpf_mode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_hpf_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_ACC_W_hpf_mode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Enable_HP_Filter
</UL>

<P><STRONG><a name="[33c]"></a>LSM303AGR_ACC_WriteReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Write_Reg
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_hpf_mode
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_hpf_cutoff_freq
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Select_Axis
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_OpMode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Data_Filter
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_DRDY_on_INT1
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[349]"></a>LSM303AGR_MAG_Get_Raw_Magnetic</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_Get_Raw_Magnetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes_Raw
</UL>

<P><STRONG><a name="[34b]"></a>LSM303AGR_MAG_R_ODR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_MAG_R_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_ODR
</UL>

<P><STRONG><a name="[34c]"></a>LSM303AGR_MAG_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_WhoAmI
</UL>

<P><STRONG><a name="[34d]"></a>LSM303AGR_MAG_R_ZYXDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_ZYXDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_MAG_R_ZYXDA &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_DRDY_Status
</UL>

<P><STRONG><a name="[34a]"></a>LSM303AGR_MAG_ReadReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Read_Reg
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ZYXDA
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ODR
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>

<P><STRONG><a name="[34e]"></a>LSM303AGR_MAG_W_BDU</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_MAG_W_BDU &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[350]"></a>LSM303AGR_MAG_W_MD</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Disable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[351]"></a>LSM303AGR_MAG_W_ODR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR_Value
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR
</UL>

<P><STRONG><a name="[352]"></a>LSM303AGR_MAG_W_ST</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ST))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_MAG_W_ST &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[34f]"></a>LSM303AGR_MAG_WriteReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM303AGR_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Write_Reg
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
</UL>

<P><STRONG><a name="[199]"></a>LSM303AGR_Sensor_IO_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.LSM303AGR_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM303AGR_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
</UL>

<P><STRONG><a name="[356]"></a>LSM6DSL_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[358]"></a>LSM6DSL_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[359]"></a>LSM6DSL_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>

<P><STRONG><a name="[35a]"></a>LSM6DSL_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Step_Count
</UL>

<P><STRONG><a name="[35b]"></a>LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[35c]"></a>LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[35d]"></a>LSM6DSL_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[35e]"></a>LSM6DSL_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[35f]"></a>LSM6DSL_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[360]"></a>LSM6DSL_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[361]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[362]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[363]"></a>LSM6DSL_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[364]"></a>LSM6DSL_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[365]"></a>LSM6DSL_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[366]"></a>LSM6DSL_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[367]"></a>LSM6DSL_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[368]"></a>LSM6DSL_ACC_GYRO_R_FS_125</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[369]"></a>LSM6DSL_ACC_GYRO_R_FS_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[36a]"></a>LSM6DSL_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_FS
</UL>

<P><STRONG><a name="[36b]"></a>LSM6DSL_ACC_GYRO_R_GDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[36c]"></a>LSM6DSL_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
</UL>

<P><STRONG><a name="[36d]"></a>LSM6DSL_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
</UL>

<P><STRONG><a name="[36e]"></a>LSM6DSL_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[36f]"></a>LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[370]"></a>LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[371]"></a>LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[372]"></a>LSM6DSL_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>

<P><STRONG><a name="[373]"></a>LSM6DSL_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[374]"></a>LSM6DSL_ACC_GYRO_R_XLDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[357]"></a>LSM6DSL_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>

<P><STRONG><a name="[375]"></a>LSM6DSL_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[377]"></a>LSM6DSL_ACC_GYRO_W_BASIC_INT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BASIC_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BASIC_INT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[378]"></a>LSM6DSL_ACC_GYRO_W_BDU</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BDU &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[379]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[37a]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[37b]"></a>LSM6DSL_ACC_GYRO_W_DUR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
</UL>

<P><STRONG><a name="[37c]"></a>LSM6DSL_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[37d]"></a>LSM6DSL_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[37e]"></a>LSM6DSL_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[37f]"></a>LSM6DSL_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Free_Fall_Threshold
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[380]"></a>LSM6DSL_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[381]"></a>LSM6DSL_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[382]"></a>LSM6DSL_ACC_GYRO_W_FS_125</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
</UL>

<P><STRONG><a name="[383]"></a>LSM6DSL_ACC_GYRO_W_FS_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
</UL>

<P><STRONG><a name="[384]"></a>LSM6DSL_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS_Value
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[385]"></a>LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[386]"></a>LSM6DSL_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FUNC_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[387]"></a>LSM6DSL_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[388]"></a>LSM6DSL_ACC_GYRO_W_LIR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[389]"></a>LSM6DSL_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[38a]"></a>LSM6DSL_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[38b]"></a>LSM6DSL_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
</UL>

<P><STRONG><a name="[38c]"></a>LSM6DSL_ACC_GYRO_W_PEDO</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PEDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PEDO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[38d]"></a>LSM6DSL_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Step_Counter_Reset
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[38e]"></a>LSM6DSL_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
</UL>

<P><STRONG><a name="[38f]"></a>LSM6DSL_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
</UL>

<P><STRONG><a name="[390]"></a>LSM6DSL_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
</UL>

<P><STRONG><a name="[391]"></a>LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[392]"></a>LSM6DSL_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[393]"></a>LSM6DSL_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[394]"></a>LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[395]"></a>LSM6DSL_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[396]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_SelfTest
</UL>

<P><STRONG><a name="[397]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_SelfTest
</UL>

<P><STRONG><a name="[398]"></a>LSM6DSL_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[399]"></a>LSM6DSL_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
</UL>

<P><STRONG><a name="[39a]"></a>LSM6DSL_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[39b]"></a>LSM6DSL_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[39c]"></a>LSM6DSL_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[39d]"></a>LSM6DSL_ACC_GYRO_W_TILT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TILT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TILT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[39e]"></a>LSM6DSL_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TIMER_HR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[39f]"></a>LSM6DSL_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[3a0]"></a>LSM6DSL_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[3a1]"></a>LSM6DSL_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[3a2]"></a>LSM6DSL_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Wake_Up_Threshold
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[3a3]"></a>LSM6DSL_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[376]"></a>LSM6DSL_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>

<P><STRONG><a name="[19b]"></a>LSM6DSL_Sensor_IO_ITConfig</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, x_nucleo_iks01a2.o(i.LSM6DSL_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
</UL>

<P><STRONG><a name="[3b1]"></a>M24SR_CloseNDEFSession</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib_m24sr.o(i.M24SR_CloseNDEFSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = M24SR_CloseNDEFSession &rArr; M24SR_Deselect &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_WriteURI
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadWifiToken
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadWifiToken
</UL>

<P><STRONG><a name="[3b2]"></a>M24SR_Deselect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M24SR_Deselect &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
</UL>

<P><STRONG><a name="[3b8]"></a>M24SR_GPOInit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, drv_i2c_m24sr.o(i.M24SR_GPOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M24SR_GPOInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[3ba]"></a>M24SR_GetSession</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_GetSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M24SR_GetSession &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[3bc]"></a>M24SR_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M24SR_Init &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[3bd]"></a>M24SR_Initialization</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lib_m24sr.o(i.M24SR_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = M24SR_Initialization &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>

<P><STRONG><a name="[3b4]"></a>M24SR_IsAnswerReady</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_i2c_m24sr.o(i.M24SR_IsAnswerReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M24SR_IsAnswerReady &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>

<P><STRONG><a name="[3c1]"></a>M24SR_KillSession</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_KillSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M24SR_KillSession &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
</UL>

<P><STRONG><a name="[3c2]"></a>M24SR_OpenNDEFSession</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lib_m24sr.o(i.M24SR_OpenNDEFSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = M24SR_OpenNDEFSession &rArr; M24SR_SelectApplication &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_WriteURI
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadWifiToken
</UL>

<P><STRONG><a name="[3bb]"></a>M24SR_PollI2C</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_i2c_m24sr.o(i.M24SR_PollI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
</UL>

<P><STRONG><a name="[3c4]"></a>M24SR_ReadBinary</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, m24sr.o(i.M24SR_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
</UL>

<P><STRONG><a name="[3c0]"></a>M24SR_ReadData</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_m24sr.o(i.M24SR_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
</UL>

<P><STRONG><a name="[3b5]"></a>M24SR_ReceiveI2Cresponse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_i2c_m24sr.o(i.M24SR_ReceiveI2Cresponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M24SR_ReceiveI2Cresponse &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>

<P><STRONG><a name="[3be]"></a>M24SR_SelectApplication</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, m24sr.o(i.M24SR_SelectApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = M24SR_SelectApplication &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[3bf]"></a>M24SR_SelectCCfile</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, m24sr.o(i.M24SR_SelectCCfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M24SR_SelectCCfile &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[3c3]"></a>M24SR_SelectNDEFfile</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, m24sr.o(i.M24SR_SelectNDEFfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M24SR_SelectNDEFfile &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
</UL>

<P><STRONG><a name="[3b3]"></a>M24SR_SendI2Ccommand</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_i2c_m24sr.o(i.M24SR_SendI2Ccommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>

<P><STRONG><a name="[3c5]"></a>M24SR_UpdateBinary</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, m24sr.o(i.M24SR_UpdateBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_WriteData
</UL>

<P><STRONG><a name="[3c6]"></a>M24SR_WriteData</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_m24sr.o(i.M24SR_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = M24SR_WriteData &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
</UL>

<P><STRONG><a name="[1ee]"></a>Map_AddOrUpdate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, map.o(i.Map_AddOrUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[28d]"></a>Map_Clone</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, map.o(i.Map_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Clone
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[28c]"></a>Map_Create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, map.o(i.Map_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Map_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[28f]"></a>Map_Destroy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, map.o(i.Map_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
</UL>

<P><STRONG><a name="[1da]"></a>Map_GetInternals</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, map.o(i.Map_GetInternals))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Map_GetInternals
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeaderCount
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_Properties
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[28e]"></a>Map_GetValueFromKey</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, map.o(i.Map_GetValueFromKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Map_GetValueFromKey &rArr; findKey &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_FindHeaderValue
</UL>

<P><STRONG><a name="[fa]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3cd]"></a>NDEF_IdentifyNDEF</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, lib_ndef.o(i.NDEF_IdentifyNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = NDEF_IdentifyNDEF &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadWifiToken
</UL>

<P><STRONG><a name="[3d3]"></a>NDEF_ReadWifiToken</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_ndef_wifi.o(i.NDEF_ReadWifiToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NDEF_ReadWifiToken &rArr; M24SR_CloseNDEFSession &rArr; M24SR_Deselect &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillWifiTokenStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadWifiToken
</UL>

<P><STRONG><a name="[3d4]"></a>NDEF_WriteURI</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, lib_ndef_uri.o(i.NDEF_WriteURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = NDEF_WriteURI &rArr; M24SR_WriteData &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_WriteData
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUriType
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_WriteURI
</UL>

<P><STRONG><a name="[f8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d6]"></a>PrintAssemblyInformation</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.PrintAssemblyInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintAssemblyInformation &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_GetVersionString
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d8]"></a>Process_Buffer</STRONG> (Thumb, 3296 bytes, Stack size 72 bytes, wifi_module.o(i.Process_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind_buffer_queue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Timer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Timer
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_WiFi
</UL>

<P><STRONG><a name="[3e1]"></a>Process_DeQed_Wind_Indication</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, wifi_module.o(i.Process_DeQed_Wind_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_DeepSleep_Timer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[3e4]"></a>Process_WiFi</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wifi_module.o(i.Process_WiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Process_WiFi &rArr; Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>

<P><STRONG><a name="[3db]"></a>Process_Wind_Indication</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, wifi_module.o(i.Process_Wind_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[3de]"></a>Queue_Client_Close_Event</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wifi_module.o(i.Queue_Client_Close_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Sock_Read_To_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_close
</UL>

<P><STRONG><a name="[3e7]"></a>Queue_Client_Open_Event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wifi_module.o(i.Queue_Client_Open_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Queue_Client_Open_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Sock_Read_To_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_open
</UL>

<P><STRONG><a name="[3e8]"></a>Queue_Client_Write_Event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wifi_module.o(i.Queue_Client_Write_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Queue_Client_Write_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Sock_Read_To_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_write
</UL>

<P><STRONG><a name="[225]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[22a]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[228]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1c3]"></a>ReCallSSIDPasswordFromMemory</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.ReCallSSIDPasswordFromMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReCallSSIDPasswordFromMemory &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
</UL>

<P><STRONG><a name="[1c4]"></a>ReadWifiTokenFromNFC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.ReadWifiTokenFromNFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ReadWifiTokenFromNFC &rArr; TT4_ReadWifiToken &rArr; NDEF_IdentifyNDEF &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadWifiToken
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
</UL>

<P><STRONG><a name="[1f5]"></a>Receive_Data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wifi_module.o(i.Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Receive_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[3ee]"></a>ResetSSIDPasswordInMemory</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, main.o(i.ResetSSIDPasswordInMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ResetSSIDPasswordInMemory &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSSIDPasswordToMemory
</UL>

<P><STRONG><a name="[1fa]"></a>Reset_AT_CMD_Buffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wifi_module.o(i.Reset_AT_CMD_Buffer))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_WiFi_SecKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
</UL>

<P><STRONG><a name="[277]"></a>SASToken_Create</STRONG> (Thumb, 338 bytes, Stack size 96 bytes, sastoken.o(i.SASToken_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = SASToken_Create &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
</UL>

<P><STRONG><a name="[3f5]"></a>SET_Configuration_Addr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wifi_module.o(i.SET_Configuration_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SET_Configuration_Addr &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[3f6]"></a>SET_Configuration_Value</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wifi_module.o(i.SET_Configuration_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SET_Configuration_Value &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
</UL>

<P><STRONG><a name="[3f7]"></a>SET_Power_State</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wifi_module.o(i.SET_Power_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SET_Power_State &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
</UL>

<P><STRONG><a name="[3f8]"></a>SET_SSID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wifi_module.o(i.SET_SSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SET_SSID &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
</UL>

<P><STRONG><a name="[3f9]"></a>SET_WiFi_SecKey</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wifi_module.o(i.SET_WiFi_SecKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SET_WiFi_SecKey &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
</UL>

<P><STRONG><a name="[3fc]"></a>SHA1Input</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sha1.o(i.SHA1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SHA1Input &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[433]"></a>SHA1Reset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sha1.o(i.SHA1Reset))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[3fe]"></a>SHA1Result</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sha1.o(i.SHA1Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SHA1Result &rArr; SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[3ff]"></a>SHA224Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha224.o(i.SHA224Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SHA224Input &rArr; SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[401]"></a>SHA224Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Reset))
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[403]"></a>SHA224Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA224Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[400]"></a>SHA256Input</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sha224.o(i.SHA256Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
</UL>

<P><STRONG><a name="[408]"></a>SHA256Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Reset))
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[409]"></a>SHA256Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[40a]"></a>SHA384Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384Input &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[40c]"></a>SHA384Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[40e]"></a>SHA384Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = SHA384Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[40b]"></a>SHA512Input</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sha384-512.o(i.SHA512Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
</UL>

<P><STRONG><a name="[413]"></a>SHA512Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[414]"></a>SHA512Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[2e7]"></a>STRING_TOKENIZER_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STRING_TOKENIZER_create &rArr; STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[415]"></a>STRING_TOKENIZER_create_from_char</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create_from_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
</UL>

<P><STRONG><a name="[2e9]"></a>STRING_TOKENIZER_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, string_tokenizer.o(i.STRING_TOKENIZER_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STRING_TOKENIZER_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[2e8]"></a>STRING_TOKENIZER_get_next_token</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, string_tokenizer.o(i.STRING_TOKENIZER_get_next_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[1ce]"></a>STRING_c_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strings.o(i.STRING_c_str))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDeviceById
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[274]"></a>STRING_clone</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strings.o(i.STRING_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Create
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[1dc]"></a>STRING_concat</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, strings.o(i.STRING_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_abandonHTTPrelativePathBegin
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_Properties
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendMapToJSON
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[3f2]"></a>STRING_concat_with_STRING</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, strings.o(i.STRING_concat_with_STRING))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_abandonHTTPrelativePathBegin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
</UL>

<P><STRONG><a name="[1db]"></a>STRING_construct</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, strings.o(i.STRING_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Create
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_abandonHTTPrelativePathBegin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[417]"></a>STRING_construct_n</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, strings.o(i.STRING_construct_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STRING_construct_n &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
</UL>

<P><STRONG><a name="[3f4]"></a>STRING_copy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strings.o(i.STRING_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STRING_copy &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
</UL>

<P><STRONG><a name="[416]"></a>STRING_copy_n</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, strings.o(i.STRING_copy_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
</UL>

<P><STRONG><a name="[1d2]"></a>STRING_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, strings.o(i.STRING_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Destroy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Create
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrelativePath
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_hostName
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrelativePath
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_deviceKey
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_deviceId
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_abandonHTTPrelativePathBegin
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_abandonHTTPrelativePathBegin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[419]"></a>STRING_empty</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, strings.o(i.STRING_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STRING_empty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
</UL>

<P><STRONG><a name="[1cd]"></a>STRING_length</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, strings.o(i.STRING_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STRING_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1b8]"></a>STRING_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strings.o(i.STRING_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Bytes
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[41a]"></a>STRING_new_JSON</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, strings.o(i.STRING_new_JSON))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STRING_new_JSON &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
</UL>

<P><STRONG><a name="[1b9]"></a>STRING_new_with_memory</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strings.o(i.STRING_new_with_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>

<P><STRONG><a name="[1c8]"></a>SaveSSIDPasswordToMemory</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, main.o(i.SaveSSIDPasswordToMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SaveSSIDPasswordToMemory &rArr; ResetSSIDPasswordInMemory &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSSIDPasswordInMemory
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
</UL>

<P><STRONG><a name="[41b]"></a>Save_Current_Setting</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wifi_module.o(i.Save_Current_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Save_Current_Setting &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
</UL>

<P><STRONG><a name="[18d]"></a>Sensor_IO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IIS2DH_ACCELERO_Init
</UL>

<P><STRONG><a name="[262]"></a>Sensor_IO_Read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>

<P><STRONG><a name="[265]"></a>Sensor_IO_Write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
</UL>

<P><STRONG><a name="[43c]"></a>Set_WiFi_Control_Variables</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wifi_module.o(i.Set_WiFi_Control_Variables))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[43b]"></a>Set_WiFi_Counter_Variables</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wifi_module.o(i.Set_WiFi_Counter_Variables))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[469]"></a>SocketMappingCallbackSetConnectionStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, socketmapping.o(i.SocketMappingCallbackSetConnectionStatus))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_client_remote_server_closed
</UL>

<P><STRONG><a name="[2dd]"></a>SocketMappingCheckAvailability</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, socketmapping.o(i.SocketMappingCheckAvailability))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketOpen
</UL>

<P><STRONG><a name="[2db]"></a>SocketMappingCloseConnection</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, socketmapping.o(i.SocketMappingCloseConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SocketMappingCloseConnection &rArr; InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketOSRelease
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingGetSocketHandle
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingGetStatus
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketCloseConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketClose
</UL>

<P><STRONG><a name="[2dc]"></a>SocketMappingGetStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, socketmapping.o(i.SocketMappingGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCloseConnection
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketSend
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketGetConnectionStatus
</UL>

<P><STRONG><a name="[2da]"></a>SocketMappingInitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, socketmapping.o(i.SocketMappingInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SocketMappingInitialize &rArr; SocketOSInitialize &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketOSInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceInitialize
</UL>

<P><STRONG><a name="[2de]"></a>SocketMappingOpenConnection</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, socketmapping.o(i.SocketMappingOpenConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SocketMappingOpenConnection &rArr; InternetAdapterSocketOpenConnection &rArr; wifi_socket_client_open &rArr; Queue_Client_Open_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketOSAssign
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketOpenConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketOpen
</UL>

<P><STRONG><a name="[2df]"></a>SocketMappingReadData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, socketmapping.o(i.SocketMappingReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SocketMappingReadData &rArr; InternetAdapterSocketReadData &rArr; SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketReceive
</UL>

<P><STRONG><a name="[2e0]"></a>SocketMappingWriteData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, socketmapping.o(i.SocketMappingWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SocketMappingWriteData &rArr; InternetAdapterSocketWriteData &rArr; wifi_socket_client_write &rArr; Queue_Client_Write_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingGetSocketHandle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketSend
</UL>

<P><STRONG><a name="[420]"></a>SocketOSAssign</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, socketos.o(i.SocketOSAssign))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingOpenConnection
</UL>

<P><STRONG><a name="[41f]"></a>SocketOSInitialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, socketos.o(i.SocketOSInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SocketOSInitialize &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingInitialize
</UL>

<P><STRONG><a name="[2d7]"></a>SocketOSReadData</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, socketos.o(i.SocketOSReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketReadData
</UL>

<P><STRONG><a name="[41e]"></a>SocketOSRelease</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, socketos.o(i.SocketOSRelease))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCloseConnection
</UL>

<P><STRONG><a name="[423]"></a>Socket_Pending_Data</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wifi_interface.o(i.Socket_Pending_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Socket_Pending_Data &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_command_mode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[425]"></a>Socket_Read</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wifi_interface.o(i.Socket_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Socket_Read &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_command_mode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[3e3]"></a>Start_DeepSleep_Timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wifi_module.o(i.Start_DeepSleep_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_DeQed_Wind_Indication
</UL>

<P><STRONG><a name="[3dc]"></a>Start_Timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_module.o(i.Start_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[440]"></a>Stop_DeepSleep_Timer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_module.o(i.Stop_DeepSleep_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>

<P><STRONG><a name="[3da]"></a>Stop_Timer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_module.o(i.Stop_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[2be]"></a>SynchronizationAgentConvertNTPTime2EpochTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, synchronizationagent.o(i.SynchronizationAgentConvertNTPTime2EpochTime))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[426]"></a>SynchronizationNTPStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, synchronizationagent.o(i.SynchronizationNTPStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SynchronizationNTPStart &rArr; InitNTPSync &rArr; InternetInterfaceStart &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[100]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SysTick_Handler &rArr; Wifi_SysTick_Isr &rArr; Process_WiFi &rArr; Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c2]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
</UL>

<P><STRONG><a name="[13a]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22f]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2ba]"></a>TT4_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lib_tagtype4.o(i.TT4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNFC
</UL>

<P><STRONG><a name="[3ea]"></a>TT4_ReadWifiToken</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lib_tagtype4.o(i.TT4_ReadWifiToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TT4_ReadWifiToken &rArr; NDEF_IdentifyNDEF &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadWifiToken
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiTokenFromNFC
</UL>

<P><STRONG><a name="[42b]"></a>TT4_WriteURI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib_tagtype4.o(i.TT4_WriteURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TT4_WriteURI &rArr; NDEF_WriteURI &rArr; M24SR_WriteData &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteURLtoNFC
</UL>

<P><STRONG><a name="[2cd]"></a>ThreadAPI_Create</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, threadapi_stm32cube.o(i.ThreadAPI_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ThreadAPI_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterCallbackSocketReceive
</UL>

<P><STRONG><a name="[42c]"></a>ThreadAPI_Initialize</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, threadapi_stm32cube.o(i.ThreadAPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ThreadAPI_Initialize &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[497]"></a>ThreadAPI_Release</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, threadapi_stm32cube.o(i.ThreadAPI_Release))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskWiFiReceiveData
</UL>

<P><STRONG><a name="[281]"></a>ThreadAPI_Sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, threadapi_stm32cube.o(i.ThreadAPI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterStart
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskWiFiReceiveData
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[2c3]"></a>Timer_Config</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32_spwf_wifi.o(i.Timer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer_Config &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
</UL>

<P><STRONG><a name="[42e]"></a>TimingSystemGetSystemTime</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, timingsystemnucleof4.o(i.TimingSystemGetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[2c8]"></a>TimingSystemInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timingsystemnucleof4.o(i.TimingSystemInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimingSystemInitialize &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWiFi
</UL>

<P><STRONG><a name="[2bf]"></a>TimingSystemSetSystemTime</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, timingsystemnucleof4.o(i.TimingSystemSetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimingSystemSetSystemTime &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[2c4]"></a>UART_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32_spwf_wifi.o(i.UART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[2c5]"></a>UART_Msg_Gpio_Init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32_spwf_wifi.o(i.UART_Msg_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_Msg_Gpio_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
</UL>

<P><STRONG><a name="[3f3]"></a>URL_Encode</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, urlencode.o(i.URL_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = URL_Encode &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
</UL>

<P><STRONG><a name="[430]"></a>URL_EncodeString</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, urlencode.o(i.URL_EncodeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = URL_EncodeString &rArr; URL_Encode &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_abandonHTTPrelativePathBegin
</UL>

<P><STRONG><a name="[122]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c6]"></a>USART_PRINT_MSG_Configuration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32_spwf_wifi.o(i.USART_PRINT_MSG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USART_PRINT_MSG_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
</UL>

<P><STRONG><a name="[1fc]"></a>USART_Receive_AT_Resp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wifi_module.o(i.USART_Receive_AT_Resp))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_WiFi_SecKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_write
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_client_open
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[1fb]"></a>USART_Transmit_AT_Cmd</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wifi_module.o(i.USART_Transmit_AT_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_WiFi_SecKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
</UL>

<P><STRONG><a name="[467]"></a>USHABlockSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usha.o(i.USHABlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[468]"></a>USHAHashSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usha.o(i.USHAHashSize))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[431]"></a>USHAInput</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usha.o(i.USHAInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>

<P><STRONG><a name="[432]"></a>USHAReset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usha.o(i.USHAReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USHAReset &rArr; SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[434]"></a>USHAResult</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usha.o(i.USHAResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[fc]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[267]"></a>VECTOR_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vector.o(i.VECTOR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
</UL>

<P><STRONG><a name="[26d]"></a>VECTOR_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vector.o(i.VECTOR_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VECTOR_destroy &rArr; internal_VECTOR_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_VECTOR_clear
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
</UL>

<P><STRONG><a name="[26c]"></a>VECTOR_element</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vector.o(i.VECTOR_element))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_DoWork
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
</UL>

<P><STRONG><a name="[305]"></a>VECTOR_erase</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vector.o(i.VECTOR_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Unregister
</UL>

<P><STRONG><a name="[2f6]"></a>VECTOR_find_if</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vector.o(i.VECTOR_find_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createOrUpdateOption
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_perDeviceDataItem
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2fd]"></a>VECTOR_push_back</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, vector.o(i.VECTOR_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createOrUpdateOption
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[26b]"></a>VECTOR_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector.o(i.VECTOR_size))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_DoWork
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
</UL>

<P><STRONG><a name="[3e6]"></a>Wait_For_Sock_Read_To_Complete</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wifi_module.o(i.Wait_For_Sock_Read_To_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Write_Event
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Open_Event
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
</UL>

<P><STRONG><a name="[23c]"></a>WiFi_HAL_UART_ErrorCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_module.o(i.WiFi_HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WiFi_HAL_UART_ErrorCallback &rArr; Error_Handler &rArr; Receive_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[249]"></a>WiFi_HAL_UART_RxCpltCallback</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wifi_module.o(i.WiFi_HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_buffer_queue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_half_full
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Timer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[24b]"></a>WiFi_HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_module.o(i.WiFi_HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[439]"></a>WiFi_Module_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wifi_module.o(i.WiFi_Module_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WiFi_Module_Init &rArr; Error_Handler &rArr; Receive_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Timer
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_WiFi_Counter_Variables
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_WiFi_Control_Variables
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[3e0]"></a>WiFi_switch_to_command_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_module.o(i.WiFi_switch_to_command_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[3e2]"></a>WiFi_switch_to_data_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_module.o(i.WiFi_switch_to_data_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_DeQed_Wind_Indication
</UL>

<P><STRONG><a name="[429]"></a>Wifi_SysTick_Isr</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, wifi_module.o(i.Wifi_SysTick_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Wifi_SysTick_Isr &rArr; Process_WiFi &rArr; Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_half_empty
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_DeepSleep_Timer
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_WiFi
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[238]"></a>Wifi_TIM_Handler</STRONG> (Thumb, 1570 bytes, Stack size 40 bytes, wifi_module.o(i.Wifi_TIM_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_warning
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_server_data_lost
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_packet_lost
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_http_data_available
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_file_data_available
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_client_left
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_socket_server_client_left
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_socket_server_client_joined
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_eventbuffer_queue
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_DeQed_Wind_Indication
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_data_received
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_client_remote_server_closed
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_resuming
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_on
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_error
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_connection_error
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_connected
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_ready
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_client_joined
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1c7]"></a>WriteURLtoNFC</STRONG> (Thumb, 48 bytes, Stack size 496 bytes, main.o(i.WriteURLtoNFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = WriteURLtoNFC &rArr; TT4_WriteURI &rArr; NDEF_WriteURI &rArr; M24SR_WriteData &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_WriteURI
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
</UL>

<P><STRONG><a name="[453]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c3]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[184]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_AP_settings
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSSIDPasswordToMemory
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSSIDPasswordInMemory
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCallSSIDPasswordFromMemory
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAssemblyInformation
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWiFi
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MAC_Add
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAzureIOTConfigurationParameters
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateWiFi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_error
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_connection_error
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_ready
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_client_joined
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterRealConnectionProcedure
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[4c4]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4c5]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[455]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c6]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[282]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[4c7]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4c8]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[456]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c9]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[181]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Initialize
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_WiFi_SecKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumTemp_Sensor_Handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyro_Sensor_Handler
</UL>

<P><STRONG><a name="[4ca]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4cb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[457]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4cc]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4cd]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4ce]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[495]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4cf]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1a7]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Destroy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CreateConnection
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloseConnection
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Create
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createOrUpdateOption
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_unbuild
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_build
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_VECTOR_clear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_JSON
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Clone
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTCPConnectionCredential
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Unregister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[276]"></a>__hardfp_difftime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, difftime.o(i.__hardfp_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
</UL>

<P><STRONG><a name="[165]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headers_ReplaceHeaderNameValuePair
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_SetOption
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CreateConnection
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CloneOption
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Create
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_JSON
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Clone
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationNTPStart
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[4d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4d1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[47d]"></a>empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ring_buffer.o(i.empty))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
</UL>

<P><STRONG><a name="[47e]"></a>event_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event_buffer.o(i.event_empty))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_eventbuffer_queue
</UL>

<P><STRONG><a name="[48f]"></a>event_full</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, event_buffer.o(i.event_full))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
</UL>

<P><STRONG><a name="[43d]"></a>event_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, event_buffer.o(i.event_init))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[140]"></a>fgetc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fgetc &rArr; uartReceiveChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReceiveChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; uartSendChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[48e]"></a>full</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.full))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_buffer_queue
</UL>

<P><STRONG><a name="[3d5]"></a>getUriType</STRONG> (Thumb, 706 bytes, Stack size 8 bytes, lib_ndef_uri.o(i.getUriType))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getUriType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
</UL>

<P><STRONG><a name="[2c0]"></a>get_ctime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime_stm32cube.o(i.get_ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_ctime &rArr; ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[1e3]"></a>get_difftime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime_stm32cube.o(i.get_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[1e2]"></a>get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime_stm32cube.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
</UL>

<P><STRONG><a name="[42f]"></a>gmtime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.gmtime))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
</UL>

<P><STRONG><a name="[4d3]"></a>gmtimeMDK</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, timingsystemnucleof4.o(i.gmtimeMDK), UNUSED)

<P><STRONG><a name="[24d]"></a>hmac</STRONG> (Thumb, 56 bytes, Stack size 400 bytes, hmac.o(i.hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
</UL>

<P><STRONG><a name="[465]"></a>hmacInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hmac.o(i.hmacInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = hmacInput &rArr; USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[464]"></a>hmacReset</STRONG> (Thumb, 166 bytes, Stack size 464 bytes, hmac.o(i.hmacReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAHashSize
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHABlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[466]"></a>hmacResult</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hmac.o(i.hmacResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = hmacResult &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[446]"></a>ind_socket_server_client_joined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_socket_server_client_joined))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[447]"></a>ind_socket_server_client_left</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_socket_server_client_left))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[44c]"></a>ind_wifi_ap_client_joined</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_ap_client_joined))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ind_wifi_ap_client_joined &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[44d]"></a>ind_wifi_ap_client_left</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_ap_client_left))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[44b]"></a>ind_wifi_ap_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_ap_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ind_wifi_ap_ready &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[44a]"></a>ind_wifi_connected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_connected))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[451]"></a>ind_wifi_connection_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_connection_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ind_wifi_connection_error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[44f]"></a>ind_wifi_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ind_wifi_error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[445]"></a>ind_wifi_file_data_available</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_file_data_available))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[444]"></a>ind_wifi_http_data_available</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_http_data_available))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[448]"></a>ind_wifi_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_on))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[452]"></a>ind_wifi_packet_lost</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_packet_lost))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[44e]"></a>ind_wifi_resuming</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_resuming))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[443]"></a>ind_wifi_socket_client_remote_server_closed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_socket_client_remote_server_closed))
<BR><BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCallbackSetConnectionStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[442]"></a>ind_wifi_socket_data_received</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internetadapter.o(i.ind_wifi_socket_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ind_wifi_socket_data_received &rArr; InternetAdapterCallbackSocketReceive &rArr; ThreadAPI_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterCallbackSocketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[449]"></a>ind_wifi_socket_server_data_lost</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_socket_server_data_lost))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[450]"></a>ind_wifi_warning</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_warning))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[43a]"></a>init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.init))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[150]"></a>iothub_client_sample_http_run</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, iothub_client_sample_http.o(i.iothub_client_sample_http_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = iothub_client_sample_http_run &rArr; platform_init &rArr; SynchronizationNTPStart &rArr; InitNTPSync &rArr; InternetInterfaceStart &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_led
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_board
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetMessageCallback
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[43f]"></a>is_half_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ring_buffer.o(i.is_half_empty))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>

<P><STRONG><a name="[438]"></a>is_half_full</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ring_buffer.o(i.is_half_full))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[139]"></a>main</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = main &rArr; ConfigAPSettings &rArr; WriteURLtoNFC &rArr; TT4_WriteURI &rArr; NDEF_WriteURI &rArr; M24SR_WriteData &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Initialize
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAssemblyInformation
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWiFi
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNucleo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNFC
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAzureIOTConfigurationParameters
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateWiFi
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2f1]"></a>mallocAndStrcpy_s</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, crt_abstractions.o(i.mallocAndStrcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createOrUpdateOption
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[3e9]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTOSTaskGeneric
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
</UL>

<P><STRONG><a name="[46f]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[428]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[42d]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Initialize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46d]"></a>platform_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform_stm32cube.o(i.platform_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[46a]"></a>platform_init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, platform_stm32cube.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = platform_init &rArr; SynchronizationNTPStart &rArr; InitNTPSync &rArr; InternetInterfaceStart &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationNTPStart
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Sensor_Enable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Sensor_Enable
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Sensor_Enable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Sensor_Enable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Sensor_Enable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Sensor_Enable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[3e5]"></a>pop_buffer_queue</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, ring_buffer.o(i.pop_buffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pop_buffer_queue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_WiFi
</UL>

<P><STRONG><a name="[441]"></a>pop_eventbuffer_queue</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, event_buffer.o(i.pop_eventbuffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pop_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[437]"></a>push_buffer_queue</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ring_buffer.o(i.push_buffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[3dd]"></a>push_eventbuffer_queue</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, event_buffer.o(i.push_eventbuffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_full
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Write_Event
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Open_Event
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
</UL>

<P><STRONG><a name="[490]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[4a3]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4a8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1a5]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_build
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_empty
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[46e]"></a>reset_board</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_stm32cube.o(i.reset_board))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
</UL>

<P><STRONG><a name="[3d9]"></a>reset_event</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, event_buffer.o(i.reset_event))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Write_Event
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Open_Event
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
</UL>

<P><STRONG><a name="[3ec]"></a>reset_led</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform_stm32cube.o(i.reset_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_led
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[3df]"></a>rewind_buffer_queue</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ring_buffer.o(i.rewind_buffer_queue))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[3eb]"></a>set_led</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform_stm32cube.o(i.set_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_led
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[3f1]"></a>size_tToString</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, crt_abstractions.o(i.size_tToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = size_tToString
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
</UL>

<P><STRONG><a name="[1c0]"></a>sprintf_s</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, crt_abstractions.o(i.sprintf_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sprintf_s &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
</UL>

<P><STRONG><a name="[27d]"></a>strcpy_s</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, crt_abstractions.o(i.strcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strcpy_s &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_CreateConnection
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>

<P><STRONG><a name="[2c9]"></a>strnlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi_module.o(i.strnlen))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWiFi
</UL>

<P><STRONG><a name="[142]"></a>taskWiFiReceiveData</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, socketos.o(i.taskWiFiReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = taskWiFiReceiveData &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Release
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketos.o(i.InternetAdapterCallbackSocketReceive)
</UL>
<P><STRONG><a name="[2e2]"></a>tickcounter_create</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tickcounter_stm32cube.o(i.tickcounter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tickcounter_create &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
</UL>

<P><STRONG><a name="[2e5]"></a>tickcounter_destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tickcounter_stm32cube.o(i.tickcounter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tickcounter_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
</UL>

<P><STRONG><a name="[2ec]"></a>tickcounter_get_current_ms</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tickcounter_stm32cube.o(i.tickcounter_get_current_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tickcounter_get_current_ms &rArr; time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
</UL>

<P><STRONG><a name="[463]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = time &rArr; TimingSystemGetSystemTime &rArr; ThreadAPI_Sleep &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_sample_http_run
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
</UL>

<P><STRONG><a name="[461]"></a>uartReceiveChar</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, console.o(i.uartReceiveChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartReceiveChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[462]"></a>uartSendChar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(i.uartSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uartSendChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[485]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list_rt.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[4a6]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list_rt.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[4a7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list_rt.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[480]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list_rt.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[499]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list_rt.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[484]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[486]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[487]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[49e]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[471]"></a>vTaskDelay</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[48d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[498]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[49a]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4a4]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[472]"></a>vTaskStartScheduler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[482]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[153]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[424]"></a>wait_for_command_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_interface.o(i.wait_for_command_mode))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
</UL>

<P><STRONG><a name="[2d1]"></a>wifi_connect</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wifi_interface.o(i.wifi_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wifi_connect &rArr; SET_Power_State &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_WiFi_SecKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterRealConnectionProcedure
</UL>

<P><STRONG><a name="[1c5]"></a>wifi_get_AP_settings</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, main.o(i.wifi_get_AP_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wifi_get_AP_settings &rArr; __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAPSettings
</UL>

<P><STRONG><a name="[2d0]"></a>wifi_init</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, wifi_interface.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakeup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterRealConnectionProcedure
</UL>

<P><STRONG><a name="[49d]"></a>wifi_reset</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wifi_module.o(i.wifi_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wifi_reset &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[2d3]"></a>wifi_socket_client_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wifi_interface.o(i.wifi_socket_client_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketCloseConnection
</UL>

<P><STRONG><a name="[2d5]"></a>wifi_socket_client_open</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifi_interface.o(i.wifi_socket_client_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wifi_socket_client_open &rArr; Queue_Client_Open_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Open_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketOpenConnection
</UL>

<P><STRONG><a name="[2d9]"></a>wifi_socket_client_write</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wifi_interface.o(i.wifi_socket_client_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wifi_socket_client_write &rArr; Queue_Client_Write_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Write_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterSocketWriteData
</UL>

<P><STRONG><a name="[49c]"></a>wifi_wakeup</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wifi_interface.o(i.wifi_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wifi_wakeup &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[49b]"></a>xPortStartScheduler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[474]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[421]"></a>xQueueGenericCreate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketOSInitialize
</UL>

<P><STRONG><a name="[422]"></a>xQueueGenericReceive</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketOSReadData
</UL>

<P><STRONG><a name="[4a2]"></a>xQueueGenericReset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[496]"></a>xQueueGenericSend</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskWiFiReceiveData
</UL>

<P><STRONG><a name="[4a5]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[476]"></a>xTaskGenericCreate</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[473]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4a1]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[48a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[48c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[483]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[203]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[202]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[204]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[205]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1f8]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[23e]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23f]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[214]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>

<P><STRONG><a name="[20f]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterRequestRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[212]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[216]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[218]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[20d]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[29a]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[210]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[213]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[21f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1fe]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[251]"></a>HTS221_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Check_WhoAmI
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Check_WhoAmI
</UL>

<P><STRONG><a name="[257]"></a>HTS221_Get_ODR</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_ODR
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_ODR
</UL>

<P><STRONG><a name="[252]"></a>HTS221_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_WhoAmI
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_WhoAmI
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>

<P><STRONG><a name="[7]"></a>HTS221_H_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_H_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_DeInit &rArr; HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_H_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_H_Get_Hum</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_H_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_H_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>HTS221_H_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>HTS221_H_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_H_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_H_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HTS221_H_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_H_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_H_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HTS221_H_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HTS221_H_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25a]"></a>HTS221_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[25b]"></a>HTS221_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Read_Reg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Read_Reg
</UL>

<P><STRONG><a name="[25c]"></a>HTS221_Sensor_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>

<P><STRONG><a name="[25d]"></a>HTS221_Sensor_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Enable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Enable
</UL>

<P><STRONG><a name="[25e]"></a>HTS221_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR
</UL>

<P><STRONG><a name="[25f]"></a>HTS221_Set_ODR_Value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR_Value
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR_Value
</UL>

<P><STRONG><a name="[14]"></a>HTS221_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HTS221_T_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_T_DeInit &rArr; HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HTS221_T_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HTS221_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HTS221_T_Get_Temp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HTS221_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HTS221_T_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_T_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HTS221_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HTS221_T_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HTS221_T_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HTS221_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HTS221_T_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HTS221_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[260]"></a>HTS221_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Write_Reg
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Write_Reg
</UL>

<P><STRONG><a name="[3af]"></a>M24SR_BuildIBlockCommand</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, m24sr.o(i.M24SR_BuildIBlockCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M24SR_BuildIBlockCommand &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>

<P><STRONG><a name="[3b0]"></a>M24SR_ComputeCrc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, m24sr.o(i.M24SR_ComputeCrc))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>

<P><STRONG><a name="[3b6]"></a>M24SR_FWTExtension</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, m24sr.o(i.M24SR_FWTExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = M24SR_FWTExtension &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
</UL>

<P><STRONG><a name="[3b7]"></a>M24SR_IsCorrectCRC16Residue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m24sr.o(i.M24SR_IsCorrectCRC16Residue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M24SR_IsCorrectCRC16Residue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>

<P><STRONG><a name="[306]"></a>LPS22HB_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3d]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[317]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
</UL>

<P><STRONG><a name="[308]"></a>LPS22HB_Get_Press</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[309]"></a>LPS22HB_Get_Temp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[307]"></a>LPS22HB_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[31d]"></a>LPS22HB_Initialize</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[21]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LPS22HB_P_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[324]"></a>LPS22HB_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
</UL>

<P><STRONG><a name="[328]"></a>LPS22HB_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[325]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[326]"></a>LPS22HB_Set_ODR_When_Disabled</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[327]"></a>LPS22HB_Set_ODR_When_Enabled</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[2e]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LPS22HB_T_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[329]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
</UL>

<P><STRONG><a name="[3a4]"></a>LSM6DSL_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Check_WhoAmI
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[7a]"></a>LSM6DSL_FIFO_G_Get_Axis</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_G_Get_Axis &rArr; LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>LSM6DSL_FIFO_G_Set_Decimation</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_G_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>LSM6DSL_FIFO_Get_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>LSM6DSL_FIFO_Get_Empty_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Get_Empty_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>LSM6DSL_FIFO_Get_Full_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Get_Full_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>LSM6DSL_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_FIFO_Get_Num_Of_Samples &rArr; LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>LSM6DSL_FIFO_Get_Overrun_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Get_Overrun_Status &rArr; LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>LSM6DSL_FIFO_Get_Pattern</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_FIFO_Get_Pattern &rArr; LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>LSM6DSL_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>LSM6DSL_FIFO_Set_Mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Set_Mode &rArr; LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>LSM6DSL_FIFO_Set_ODR_Value</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Set_ODR_Value &rArr; LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>LSM6DSL_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_Set_Stop_On_Fth &rArr; LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>LSM6DSL_FIFO_Set_Watermark_Level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_FIFO_Set_Watermark_Level &rArr; LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>LSM6DSL_FIFO_X_Get_Axis</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_X_Get_Axis &rArr; LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>LSM6DSL_FIFO_X_Set_Decimation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_FIFO_X_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>LSM6DSL_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>LSM6DSL_G_DeInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_G_DeInit &rArr; LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>LSM6DSL_G_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Get_Axes &rArr; LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>LSM6DSL_G_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Get_AxesRaw &rArr; LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a6]"></a>LSM6DSL_G_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_AxesRaw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
</UL>

<P><STRONG><a name="[a0]"></a>LSM6DSL_G_Get_DRDY_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>LSM6DSL_G_Get_FS</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>LSM6DSL_G_Get_ODR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>LSM6DSL_G_Get_Sensitivity</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>LSM6DSL_G_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_G_Get_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>LSM6DSL_G_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_G_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>LSM6DSL_G_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_G_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>LSM6DSL_G_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>LSM6DSL_G_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Sensor_Enable &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>LSM6DSL_G_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>LSM6DSL_G_Set_FS_Value</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>LSM6DSL_G_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Set_Interrupt_Latch &rArr; LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>LSM6DSL_G_Set_ODR</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Set_ODR &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>LSM6DSL_G_Set_ODR_Value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Set_ODR_Value &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3aa]"></a>LSM6DSL_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[3a8]"></a>LSM6DSL_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Enable
</UL>

<P><STRONG><a name="[7c]"></a>LSM6DSL_G_Set_SelfTest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_G_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>LSM6DSL_G_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_G_Write_Reg &rArr; LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a5]"></a>LSM6DSL_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_WhoAmI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_WhoAmI
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>

<P><STRONG><a name="[3a7]"></a>LSM6DSL_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Read_Reg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Read_Reg
</UL>

<P><STRONG><a name="[3a9]"></a>LSM6DSL_Set_Interrupt_Latch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Interrupt_Latch
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[3ab]"></a>LSM6DSL_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Write_Reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Write_Reg
</UL>

<P><STRONG><a name="[82]"></a>LSM6DSL_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>LSM6DSL_X_DeInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_DeInit &rArr; LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>LSM6DSL_X_Disable_6D_Orientation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Disable_6D_Orientation &rArr; LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>LSM6DSL_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Disable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LSM6DSL_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Disable_Free_Fall_Detection &rArr; LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LSM6DSL_X_Disable_Pedometer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LSM6DSL_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Disable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LSM6DSL_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Disable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LSM6DSL_X_Disable_Tilt_Detection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Disable_Tilt_Detection &rArr; LSM6DSL_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LSM6DSL_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Disable_Wake_Up_Detection &rArr; LSM6DSL_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>LSM6DSL_X_Enable_6D_Orientation</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Enable_6D_Orientation &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LSM6DSL_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Enable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LSM6DSL_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Enable_Free_Fall_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>LSM6DSL_X_Enable_Pedometer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_X_Enable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LSM6DSL_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Enable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LSM6DSL_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Enable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LSM6DSL_X_Enable_Tilt_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Enable_Tilt_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LSM6DSL_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Enable_Wake_Up_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>LSM6DSL_X_Get_6D_Orientation_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_Status &rArr; LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>LSM6DSL_X_Get_6D_Orientation_XH</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XH &rArr; LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>LSM6DSL_X_Get_6D_Orientation_XL</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XL &rArr; LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>LSM6DSL_X_Get_6D_Orientation_YH</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YH &rArr; LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LSM6DSL_X_Get_6D_Orientation_YL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YL &rArr; LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>LSM6DSL_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZH &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>LSM6DSL_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZL &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LSM6DSL_X_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Get_Axes &rArr; LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>LSM6DSL_X_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_AxesRaw &rArr; LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3ac]"></a>LSM6DSL_X_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_AxesRaw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
</UL>

<P><STRONG><a name="[8e]"></a>LSM6DSL_X_Get_DRDY_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>LSM6DSL_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Double_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>LSM6DSL_X_Get_FS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LSM6DSL_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Free_Fall_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>LSM6DSL_X_Get_ODR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LSM6DSL_X_Get_Pedometer_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Pedometer_Status &rArr; LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LSM6DSL_X_Get_Sensitivity</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LSM6DSL_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Single_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LSM6DSL_X_Get_Step_Count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Get_Step_Count &rArr; LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LSM6DSL_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Tilt_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>LSM6DSL_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Get_Wake_Up_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>LSM6DSL_X_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_X_Get_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>LSM6DSL_X_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_X_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>LSM6DSL_X_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_X_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>LSM6DSL_X_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Sensor_Disable &rArr; LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>LSM6DSL_X_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Sensor_Enable &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>LSM6DSL_X_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>LSM6DSL_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LSM6DSL_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Free_Fall_Threshold &rArr; LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>LSM6DSL_X_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Interrupt_Latch &rArr; LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LSM6DSL_X_Set_ODR</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_ODR &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>LSM6DSL_X_Set_ODR_Value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3ae]"></a>LSM6DSL_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[3ad]"></a>LSM6DSL_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Enable
</UL>

<P><STRONG><a name="[4f]"></a>LSM6DSL_X_Set_Pedometer_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>LSM6DSL_X_Set_SelfTest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>LSM6DSL_X_Set_Tap_Duration_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Tap_Duration_Time &rArr; LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>LSM6DSL_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Tap_Quiet_Time &rArr; LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>LSM6DSL_X_Set_Tap_Shock_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Tap_Shock_Time &rArr; LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LSM6DSL_X_Set_Tap_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>LSM6DSL_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_X_Set_Wake_Up_Threshold &rArr; LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>LSM6DSL_X_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_X_Write_Reg &rArr; LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>LSM303AGR_X_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_X_Check_WhoAmI &rArr; LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>LSM303AGR_X_ClearDRDY</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_ClearDRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_X_ClearDRDY &rArr; LSM303AGR_ACC_Clear_DRDY &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Clear_DRDY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>LSM303AGR_X_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_DeInit &rArr; LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>LSM303AGR_X_Disable_HP_Filter</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Disable_HP_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Disable_HP_Filter &rArr; LSM303AGR_ACC_W_Data_Filter &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Data_Filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LSM303AGR_X_Enable_HP_Filter</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Enable_HP_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_X_Enable_HP_Filter &rArr; LSM303AGR_ACC_W_hpf_mode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_hpf_mode
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_hpf_cutoff_freq
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Data_Filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LSM303AGR_X_Get_Active_Axis</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Active_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Get_Active_Axis &rArr; LSM303AGR_ACC_R_Select_Axis &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_Select_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>LSM303AGR_X_Get_Axes</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM303AGR_X_Get_Axes &rArr; LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>LSM303AGR_X_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_X_Get_AxesRaw &rArr; LSM303AGR_X_Get_Axes_Raw &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>LSM303AGR_X_Get_AxesSuperRaw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesSuperRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Get_AxesSuperRaw &rArr; LSM303AGR_ACC_GetSingleRawAccData &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetSingleRawAccData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[354]"></a>LSM303AGR_X_Get_Axes_Raw</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_Axes_Raw &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesRaw
</UL>

<P><STRONG><a name="[b9]"></a>LSM303AGR_X_Get_Axes_Status</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_X_Get_Axes_Status &rArr; LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>LSM303AGR_X_Get_DRDY_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Get_DRDY_Status &rArr; LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>LSM303AGR_X_Get_FS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Get_FS &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>LSM303AGR_X_Get_ODR</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>LSM303AGR_X_Get_OpMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_X_Get_OpMode &rArr; LSM303AGR_ACC_R_OpMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_OpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>LSM303AGR_X_Get_Sensitivity</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Get_Sensitivity &rArr; LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>LSM303AGR_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>LSM303AGR_X_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_X_Init &rArr; LSM303AGR_X_Set_Axes_Status &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_OpMode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>LSM303AGR_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_X_Read_Reg &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>LSM303AGR_X_Sensor_Disable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_OpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>LSM303AGR_X_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_X_Sensor_Enable &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_OpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>LSM303AGR_X_Set_Active_Axis</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Active_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Set_Active_Axis &rArr; LSM303AGR_ACC_W_Select_Axis &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_Select_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>LSM303AGR_X_Set_Axes_Status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_X_Set_Axes_Status &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>LSM303AGR_X_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Set_FS &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>LSM303AGR_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Set_FS_Value &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>LSM303AGR_X_Set_INT1_DRDY</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_INT1_DRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Set_INT1_DRDY &rArr; LSM303AGR_ACC_W_DRDY_on_INT1 &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_DRDY_on_INT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>LSM303AGR_X_Set_ODR</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Set_ODR &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>LSM303AGR_X_Set_ODR_Value</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_X_Set_ODR_Value &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[355]"></a>LSM303AGR_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Enable
</UL>

<P><STRONG><a name="[a3]"></a>LSM303AGR_X_Set_OpMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_X_Set_OpMode &rArr; LSM303AGR_ACC_W_OpMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_OpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>LSM303AGR_X_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_X_Write_Reg &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>LSM303AGR_M_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>LSM303AGR_M_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_M_DeInit &rArr; LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>LSM303AGR_M_Get_Axes</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Get_Axes &rArr; LSM303AGR_M_Get_Axes_Raw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>LSM303AGR_M_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Get_AxesRaw &rArr; LSM303AGR_M_Get_Axes_Raw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[353]"></a>LSM303AGR_M_Get_Axes_Raw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_M_Get_Axes_Raw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_AxesRaw
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes
</UL>

<P><STRONG><a name="[cf]"></a>LSM303AGR_M_Get_DRDY_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_M_Get_DRDY_Status &rArr; LSM303AGR_MAG_R_ZYXDA &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ZYXDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>LSM303AGR_M_Get_FS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_FS))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>LSM303AGR_M_Get_ODR</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_M_Get_ODR &rArr; LSM303AGR_MAG_R_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>LSM303AGR_M_Get_Sensitivity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Sensitivity))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>LSM303AGR_M_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>LSM303AGR_M_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_M_Init &rArr; LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>LSM303AGR_M_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_M_Read_Reg &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>LSM303AGR_M_Sensor_Disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_M_Sensor_Disable &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>LSM303AGR_M_Sensor_Enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_M_Sensor_Enable &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>LSM303AGR_M_Set_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>LSM303AGR_M_Set_FS_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS_Value))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>LSM303AGR_M_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_M_Set_ODR &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>LSM303AGR_M_Set_ODR_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_M_Set_ODR_Value &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>LSM303AGR_M_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_M_Write_Reg &rArr; LSM303AGR_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>IIS2DH_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IIS2DH_Check_WhoAmI &rArr; IIS2DH_Get_WhoAmI &rArr; IIS2DH_R_WHO_AM_I &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>IIS2DH_ClearDRDY</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_ClearDRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_ClearDRDY &rArr; IIS2DH_Clear_DRDY &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Clear_DRDY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>IIS2DH_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IIS2DH_DeInit &rArr; IIS2DH_Sensor_Disable &rArr; IIS2DH_Get_ODR &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_Disable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>IIS2DH_Disable_HP_Filter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Disable_HP_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Disable_HP_Filter &rArr; IIS2DH_W_HPF_FDS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_FDS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>IIS2DH_Enable_HP_Filter</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Enable_HP_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IIS2DH_Enable_HP_Filter &rArr; IIS2DH_W_HPF_Mode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_Mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_FDS
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_HPF_Cutoff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>IIS2DH_Get_Active_Axis</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_Active_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Get_Active_Axis &rArr; IIS2DH_R_Select_Axis &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_Select_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>IIS2DH_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IIS2DH_Get_Axes &rArr; IIS2DH_Get_Axes_Raw &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Sensitivity
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>IIS2DH_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IIS2DH_Get_AxesRaw &rArr; IIS2DH_Get_Axes_Raw &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>IIS2DH_Get_AxesSuperRaw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_AxesSuperRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Get_AxesSuperRaw &rArr; IIS2DH_GetSingleRawAccData &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_GetSingleRawAccData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a3]"></a>IIS2DH_Get_Axes_Raw</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IIS2DH_Get_Axes_Raw &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_GetRawAccData
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_AxesRaw
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes
</UL>

<P><STRONG><a name="[e8]"></a>IIS2DH_Get_Axes_Status</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IIS2DH_Get_Axes_Status &rArr; IIS2DH_R_ZEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_ZEN
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_YEN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_XEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>IIS2DH_Get_DRDY_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Get_DRDY_Status &rArr; IIS2DH_R_XDataAvail &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_XDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>IIS2DH_Get_FS</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Get_FS &rArr; IIS2DH_R_FS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_FS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>IIS2DH_Get_ODR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IIS2DH_Get_ODR &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>IIS2DH_Get_OpMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IIS2DH_Get_OpMode &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>IIS2DH_Get_Sensitivity</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IIS2DH_Get_Sensitivity &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>IIS2DH_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIS2DH_Get_WhoAmI &rArr; IIS2DH_R_WHO_AM_I &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>IIS2DH_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IIS2DH_Init &rArr; IIS2DH_Set_Axes_Status &rArr; IIS2DH_W_ZEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_FS
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_Axes_Status
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Check_WhoAmI
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_OpMode
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ODR
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FIFO_MODE
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>IIS2DH_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_Read_Reg &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>IIS2DH_Sensor_Disable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = IIS2DH_Sensor_Disable &rArr; IIS2DH_Get_ODR &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Get_ODR
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ODR
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>IIS2DH_Sensor_Enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IIS2DH_Sensor_Enable &rArr; IIS2DH_Set_ODR_Value_When_Enabled &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value_When_Enabled
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_OpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>IIS2DH_Set_Active_Axis</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_Active_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Set_Active_Axis &rArr; IIS2DH_W_Select_Axis &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_Select_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>IIS2DH_Set_Axes_Status</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IIS2DH_Set_Axes_Status &rArr; IIS2DH_W_ZEN &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ZEN
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_YEN
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_XEN
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>IIS2DH_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Set_FS &rArr; IIS2DH_W_FS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>IIS2DH_Set_FS_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Set_FS_Value &rArr; IIS2DH_W_FS &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_FS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>IIS2DH_Set_INT1_DRDY</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_INT1_DRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Set_INT1_DRDY &rArr; IIS2DH_W_DRDY_on_INT1 &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_DRDY_on_INT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>IIS2DH_Set_ODR</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIS2DH_Set_ODR &rArr; IIS2DH_W_ODR &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>IIS2DH_Set_ODR_Value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = IIS2DH_Set_ODR_Value &rArr; IIS2DH_Set_ODR_Value_When_Enabled &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value_When_Enabled
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b7]"></a>IIS2DH_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_ODR_Value_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IIS2DH_Set_ODR_Value_When_Disabled &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value
</UL>

<P><STRONG><a name="[2b0]"></a>IIS2DH_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IIS2DH_Set_ODR_Value_When_Enabled &rArr; IIS2DH_R_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_ODR
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_R_OpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Set_ODR_Value
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_Enable
</UL>

<P><STRONG><a name="[d2]"></a>IIS2DH_Set_OpMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iis2dh_driver_hl.o(i.IIS2DH_Set_OpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IIS2DH_Set_OpMode &rArr; IIS2DH_W_OpMode &rArr; IIS2DH_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_W_OpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>IIS2DH_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, iis2dh_driver_hl.o(i.IIS2DH_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIS2DH_Write_Reg &rArr; IIS2DH_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis2dh_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b9]"></a>M24SR_GPO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_i2c_m24sr.o(i.M24SR_GPO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M24SR_GPO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
</UL>

<P><STRONG><a name="[475]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[488]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[489]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[48b]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[47f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[481]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[14f]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[4a9]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[491]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[492]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[14e]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3cf]"></a>NDEF_IdentifySPRecord</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lib_ndef.o(i.NDEF_IdentifySPRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
</UL>

<P><STRONG><a name="[3d0]"></a>NDEF_ParseMediaType</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseMediaType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NDEF_ParseMediaType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[3ce]"></a>NDEF_ParseRecordHeader</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseRecordHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NDEF_ParseRecordHeader &rArr; NDEF_ParseWellKnownType &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseMediaType
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
</UL>

<P><STRONG><a name="[3d2]"></a>NDEF_ParseWellKnownType</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lib_ndef.o(i.NDEF_ParseWellKnownType))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NDEF_ParseWellKnownType &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[3cc]"></a>NDEF_FillWifiTokenStruct</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lib_ndef_wifi.o(i.NDEF_FillWifiTokenStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NDEF_FillWifiTokenStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadWifiToken
</UL>

<P><STRONG><a name="[1b6]"></a>Base64_Encode_Internal</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, base64.o(i.Base64_Encode_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Bytes
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode
</UL>

<P><STRONG><a name="[1b2]"></a>Base64decode</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, base64.o(i.Base64decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Base64decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
</UL>

<P><STRONG><a name="[1ba]"></a>base64toValue</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, base64.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
</UL>

<P><STRONG><a name="[26e]"></a>buildAllRequests</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, httpapiex.o(i.buildAllRequests))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = buildAllRequests &rArr; buildRequestHttpHeadersHandle &rArr; HTTPHeaders_ReplaceHeaderNameValuePair &rArr; headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildRequestHttpHeadersHandle
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildBufferIfNotExist
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
</UL>

<P><STRONG><a name="[45e]"></a>buildBufferIfNotExist</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, httpapiex.o(i.buildBufferIfNotExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = buildBufferIfNotExist &rArr; BUFFER_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildAllRequests
</UL>

<P><STRONG><a name="[45f]"></a>buildRequestHttpHeadersHandle</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, httpapiex.o(i.buildRequestHttpHeadersHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = buildRequestHttpHeadersHandle &rArr; HTTPHeaders_ReplaceHeaderNameValuePair &rArr; headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_ReplaceHeaderNameValuePair
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildAllRequests
</UL>

<P><STRONG><a name="[27a]"></a>createOrUpdateOption</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, httpapiex.o(i.createOrUpdateOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = createOrUpdateOption &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SetOption
</UL>

<P><STRONG><a name="[149]"></a>sameName</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, httpapiex.o(i.sameName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sameName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpapiex.o(i.createOrUpdateOption)
</UL>
<P><STRONG><a name="[28b]"></a>headers_ReplaceHeaderNameValuePair</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, httpheaders.o(i.headers_ReplaceHeaderNameValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetValueFromKey
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_ReplaceHeaderNameValuePair
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_AddHeaderNameValuePair
</UL>

<P><STRONG><a name="[3c9]"></a>Map_CloneVector</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, map.o(i.Map_CloneVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
</UL>

<P><STRONG><a name="[3ca]"></a>Map_DecreaseStorageKeysValues</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, map.o(i.Map_DecreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Map_DecreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[3cb]"></a>Map_IncreaseStorageKeysValues</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, map.o(i.Map_IncreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[3c7]"></a>findKey</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, map.o(i.findKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findKey &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetValueFromKey
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[3c8]"></a>insertNewKeyValue</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, map.o(i.insertNewKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[3fa]"></a>SHA1Finalize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sha1.o(i.SHA1Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
</UL>

<P><STRONG><a name="[3fb]"></a>SHA1PadMessage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sha1.o(i.SHA1PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>

<P><STRONG><a name="[3fd]"></a>SHA1ProcessMessageBlock</STRONG> (Thumb, 370 bytes, Stack size 380 bytes, sha1.o(i.SHA1ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>

<P><STRONG><a name="[405]"></a>SHA224_256Finalize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sha224.o(i.SHA224_256Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>

<P><STRONG><a name="[406]"></a>SHA224_256PadMessage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>

<P><STRONG><a name="[407]"></a>SHA224_256ProcessMessageBlock</STRONG> (Thumb, 302 bytes, Stack size 324 bytes, sha224.o(i.SHA224_256ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>

<P><STRONG><a name="[402]"></a>SHA224_256Reset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sha224.o(i.SHA224_256Reset))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
</UL>

<P><STRONG><a name="[404]"></a>SHA224_256ResultN</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
</UL>

<P><STRONG><a name="[410]"></a>SHA384_512Finalize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sha384-512.o(i.SHA384_512Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>

<P><STRONG><a name="[411]"></a>SHA384_512PadMessage</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
</UL>

<P><STRONG><a name="[412]"></a>SHA384_512ProcessMessageBlock</STRONG> (Thumb, 766 bytes, Stack size 832 bytes, sha384-512.o(i.SHA384_512ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>

<P><STRONG><a name="[40d]"></a>SHA384_512Reset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
</UL>

<P><STRONG><a name="[40f]"></a>SHA384_512ResultN</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sha384-512.o(i.SHA384_512ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
</UL>

<P><STRONG><a name="[435]"></a>internal_VECTOR_clear</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vector.o(i.internal_VECTOR_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = internal_VECTOR_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
</UL>

<P><STRONG><a name="[288]"></a>readChunk</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, httpapi_stm32cube.o(i.readChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = readChunk &rArr; InternetInterfaceSocketReceive &rArr; SocketMappingReadData &rArr; InternetAdapterSocketReadData &rArr; SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipN
</UL>

<P><STRONG><a name="[284]"></a>readLine</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, httpapi_stm32cube.o(i.readLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = readLine &rArr; InternetInterfaceSocketReceive &rArr; SocketMappingReadData &rArr; InternetAdapterSocketReadData &rArr; SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[289]"></a>skipN</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, httpapi_stm32cube.o(i.skipN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = skipN &rArr; readChunk &rArr; InternetInterfaceSocketReceive &rArr; SocketMappingReadData &rArr; InternetAdapterSocketReadData &rArr; SocketOSReadData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPI_ExecuteRequest
</UL>

<P><STRONG><a name="[17e]"></a>AccGyro_Sensor_Handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, platform_stm32cube.o(i.AccGyro_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AccGyro_Sensor_Handler &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Get_Axes
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Get_Axes
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
</UL>

<P><STRONG><a name="[1bd]"></a>HumTemp_Sensor_Handler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, platform_stm32cube.o(i.HumTemp_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HumTemp_Sensor_Handler &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_IsInitialized
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Get_Temp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_IsInitialized
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Get_Hum
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposeMessageSensors
</UL>

<P><STRONG><a name="[145]"></a>RTOSTaskGeneric</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, threadapi_stm32cube.o(i.RTOSTaskGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTOSTaskGeneric &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threadapi_stm32cube.o(i.ThreadAPI_Initialize)
</UL>
<P><STRONG><a name="[2bb]"></a>InitNTPSync</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, synchronizationagent.o(i.InitNTPSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = InitNTPSync &rArr; InternetInterfaceStart &rArr; InternetAdapterStart &rArr; InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ctime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationAgentConvertNTPTime2EpochTime
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTCPConnectionCredential
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceStart
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketReceive
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketOpen
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetInterfaceSocketClose
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationNTPStart
</UL>

<P><STRONG><a name="[2bc]"></a>ReleaseTCPConnectionCredential</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, synchronizationagent.o(i.ReleaseTCPConnectionCredential))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReleaseTCPConnectionCredential &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNTPSync
</UL>

<P><STRONG><a name="[2cf]"></a>InternetAdapterRealConnectionProcedure</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, internetadapter.o(i.InternetAdapterRealConnectionProcedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InternetAdapterRealConnectionProcedure &rArr; wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Configuration_Value
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternetAdapterStart
</UL>

<P><STRONG><a name="[41d]"></a>SocketMappingGetSocketHandle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, socketmapping.o(i.SocketMappingGetSocketHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingWriteData
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketMappingCloseConnection
</UL>

<P><STRONG><a name="[14c]"></a>ReceiveMessageCallback</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, iothub_client_sample_http.o(i.ReceiveMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReceiveMessageCallback &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_led
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_sample_http.o(i.iothub_client_sample_http_run)
</UL>
<P><STRONG><a name="[14d]"></a>SendConfirmationCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iothub_client_sample_http.o(i.SendConfirmationCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SendConfirmationCallback &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_CONFIRMATION_RESULTStrings
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_sample_http.o(i.iothub_client_sample_http_run)
</UL>
<P><STRONG><a name="[2e4]"></a>setTransportProtocol</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, iothub_client_ll.o(i.setTransportProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Create
</UL>

<P><STRONG><a name="[436]"></a>ContainsOnlyUsAscii</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iothub_message.o(i.ContainsOnlyUsAscii))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateAsciiCharactersFilter
</UL>

<P><STRONG><a name="[143]"></a>ValidateAsciiCharactersFilter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iothub_message.o(i.ValidateAsciiCharactersFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValidateAsciiCharactersFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsOnlyUsAscii
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
</UL>
<P><STRONG><a name="[1c9]"></a>DoEvent</STRONG> (Thumb, 706 bytes, Stack size 120 bytes, iothubtransporthttp.o(i.DoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = DoEvent &rArr; HTTPAPIEX_SAS_ExecuteRequest &rArr; HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_ReplaceHeaderNameValuePair
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_build
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Clone
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reversePutListBackIn
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetMessageId
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetCorrelationId
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentType
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_DoWork
</UL>

<P><STRONG><a name="[1e1]"></a>DoMessages</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, iothubtransporthttp.o(i.DoMessages))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = DoMessages &rArr; abandonOrAcceptMessage &rArr; HTTPAPIEX_SAS_ExecuteRequest &rArr; HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_FindHeaderValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_ReplaceHeaderNameValuePair
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeaderCount
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_GetHeader
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abandonOrAcceptMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_DoWork
</UL>

<P><STRONG><a name="[ef]"></a>IoTHubTransportHttp_Create</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransportHttp_Create &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Create
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_httpApiExHandle
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_hostName
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>IoTHubTransportHttp_Destroy</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IoTHubTransportHttp_Destroy &rArr; destroy_httpApiExHandle &rArr; HTTPAPIEX_Destroy &rArr; HTTPAPI_CloseConnection &rArr; InternetInterfaceSocketClose &rArr; SocketMappingCloseConnection &rArr; InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_httpApiExHandle
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_hostName
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>IoTHubTransportHttp_DoWork</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = IoTHubTransportHttp_DoWork &rArr; DoMessages &rArr; abandonOrAcceptMessage &rArr; HTTPAPIEX_SAS_ExecuteRequest &rArr; HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>IoTHubTransportHttp_GetHostname</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_GetHostname))
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>IoTHubTransportHttp_GetSendStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubTransportHttp_GetSendStatus &rArr; get_perDeviceDataItem &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_perDeviceDataItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>IoTHubTransportHttp_Register</STRONG> (Thumb, 530 bytes, Stack size 80 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IoTHubTransportHttp_Register &rArr; create_eventHTTPrequestHeaders &rArr; HTTPHeaders_AddHeaderNameValuePair &rArr; headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_AddHeaderNameValuePair
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrequestHeaders
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrelativePath
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrequestHeaders
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrelativePath
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_deviceKey
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_deviceId
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_abandonHTTPrelativePathBegin
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_SASObject
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_deviceSASObject
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_abandonHTTPrelativePathBegin
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>IoTHubTransportHttp_SetOption</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IoTHubTransportHttp_SetOption &rArr; HTTPAPIEX_SetOption &rArr; createOrUpdateOption &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SetOption
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>IoTHubTransportHttp_Subscribe</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubTransportHttp_Subscribe &rArr; get_perDeviceDataItem &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_perDeviceDataItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>IoTHubTransportHttp_Unregister</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_Unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubTransportHttp_Unregister &rArr; VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_perDeviceDataItem
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>IoTHubTransportHttp_Unsubscribe</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.IoTHubTransportHttp_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubTransportHttp_Unsubscribe &rArr; get_perDeviceDataItem &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_perDeviceDataItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(.data)
</UL>
<P><STRONG><a name="[1ea]"></a>abandonOrAcceptMessage</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, iothubtransporthttp.o(i.abandonOrAcceptMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = abandonOrAcceptMessage &rArr; HTTPAPIEX_SAS_ExecuteRequest &rArr; HTTPAPIEX_ExecuteRequest &rArr; HTTPAPI_ExecuteRequest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_ExecuteRequest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_ReplaceHeaderNameValuePair
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_ExecuteRequest
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_AddHeaderNameValuePair
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoMessages
</UL>

<P><STRONG><a name="[45d]"></a>appendMapToJSON</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, iothubtransporthttp.o(i.appendMapToJSON))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = appendMapToJSON &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_Properties
</UL>

<P><STRONG><a name="[460]"></a>concat_Properties</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, iothubtransporthttp.o(i.concat_Properties))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = concat_Properties &rArr; appendMapToJSON &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendMapToJSON
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
</UL>

<P><STRONG><a name="[2fb]"></a>create_abandonHTTPrelativePathBegin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iothubtransporthttp.o(i.create_abandonHTTPrelativePathBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_abandonHTTPrelativePathBegin &rArr; STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2fc]"></a>create_deviceSASObject</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, iothubtransporthttp.o(i.create_deviceSASObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = create_deviceSASObject &rArr; STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_empty
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2f7]"></a>create_eventHTTPrelativePath</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iothubtransporthttp.o(i.create_eventHTTPrelativePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_eventHTTPrelativePath &rArr; STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrelativePath
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2f9]"></a>create_eventHTTPrequestHeaders</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, iothubtransporthttp.o(i.create_eventHTTPrequestHeaders))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = create_eventHTTPrequestHeaders &rArr; HTTPHeaders_AddHeaderNameValuePair &rArr; headers_ReplaceHeaderNameValuePair &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Alloc
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_AddHeaderNameValuePair
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrequestHeaders
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2f8]"></a>create_messageHTTPrelativePath</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iothubtransporthttp.o(i.create_messageHTTPrelativePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_messageHTTPrelativePath &rArr; STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrelativePath
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2fe]"></a>destroy_SASObject</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_SASObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = destroy_SASObject &rArr; HTTPAPIEX_SAS_Destroy &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_SAS_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2ff]"></a>destroy_abandonHTTPrelativePathBegin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_abandonHTTPrelativePathBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = destroy_abandonHTTPrelativePathBegin &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[303]"></a>destroy_deviceId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_deviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = destroy_deviceId &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[304]"></a>destroy_deviceKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_deviceKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = destroy_deviceKey &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[302]"></a>destroy_eventHTTPrelativePath</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_eventHTTPrelativePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = destroy_eventHTTPrelativePath &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrelativePath
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[301]"></a>destroy_eventHTTPrequestHeaders</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_eventHTTPrequestHeaders))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = destroy_eventHTTPrequestHeaders &rArr; HTTPHeaders_Free &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_eventHTTPrequestHeaders
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2f2]"></a>destroy_hostName</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_hostName))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = destroy_hostName &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
</UL>

<P><STRONG><a name="[2f3]"></a>destroy_httpApiExHandle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_httpApiExHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = destroy_httpApiExHandle &rArr; HTTPAPIEX_Destroy &rArr; HTTPAPI_CloseConnection &rArr; InternetInterfaceSocketClose &rArr; SocketMappingCloseConnection &rArr; InternetAdapterSocketCloseConnection &rArr; wifi_socket_client_close &rArr; Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPAPIEX_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Create
</UL>

<P><STRONG><a name="[300]"></a>destroy_messageHTTPrelativePath</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_messageHTTPrelativePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = destroy_messageHTTPrelativePath &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_messageHTTPrelativePath
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2fa]"></a>destroy_messageHTTPrequestHeaders</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_messageHTTPrequestHeaders))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = destroy_messageHTTPrequestHeaders &rArr; HTTPHeaders_Free &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPHeaders_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_perDeviceData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Register
</UL>

<P><STRONG><a name="[2f4]"></a>destroy_perDeviceData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.destroy_perDeviceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = destroy_perDeviceData &rArr; destroy_messageHTTPrequestHeaders &rArr; HTTPHeaders_Free &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrequestHeaders
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_messageHTTPrelativePath
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrequestHeaders
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_eventHTTPrelativePath
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_deviceKey
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_deviceId
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_abandonHTTPrelativePathBegin
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_SASObject
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Unregister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Destroy
</UL>

<P><STRONG><a name="[144]"></a>findDeviceById</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.findDeviceById))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = findDeviceById &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(i.IoTHubTransportHttp_Register)
</UL>
<P><STRONG><a name="[14a]"></a>findDeviceHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iothubtransporthttp.o(i.findDeviceHandle))
<BR>[Address Reference Count : 1]<UL><LI> iothubtransporthttp.o(i.get_perDeviceDataItem)
</UL>
<P><STRONG><a name="[2f5]"></a>get_perDeviceDataItem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iothubtransporthttp.o(i.get_perDeviceDataItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_perDeviceDataItem &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Unsubscribe
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Unregister
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_Subscribe
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportHttp_GetSendStatus
</UL>

<P><STRONG><a name="[470]"></a>make1EventJSONitem</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, iothubtransporthttp.o(i.make1EventJSONitem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = make1EventJSONitem &rArr; concat_Properties &rArr; appendMapToJSON &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Bytes
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_JSON
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_Properties
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentType
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makePayload
</UL>

<P><STRONG><a name="[1cc]"></a>makePayload</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, iothubtransporthttp.o(i.makePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = makePayload &rArr; make1EventJSONitem &rArr; concat_Properties &rArr; appendMapToJSON &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make1EventJSONitem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[1cf]"></a>reversePutListBackIn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iothubtransporthttp.o(i.reversePutListBackIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reversePutListBackIn
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_AppendTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEvent
</UL>

<P><STRONG><a name="[295]"></a>I2C_EXPBD_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_EXPBD_Error &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[296]"></a>I2C_EXPBD_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[298]"></a>I2C_EXPBD_MspInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[187]"></a>BSP_IIS2DH_ACCELERO_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_IIS2DH_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_IIS2DH_ACCELERO_Init &rArr; IIS2DH_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS2DH_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[188]"></a>BSP_LSM303AGR_ACCELERO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_LSM303AGR_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_ACCELERO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[189]"></a>BSP_LSM6DSL_ACCELERO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_LSM6DSL_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[18b]"></a>BSP_LSM6DSL_GYRO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_LSM6DSL_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LSM6DSL_GYRO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
</UL>

<P><STRONG><a name="[18c]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
</UL>

<P><STRONG><a name="[19a]"></a>BSP_LSM303AGR_MAGNETO_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_LSM303AGR_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init
</UL>

<P><STRONG><a name="[196]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[18e]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[198]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[459]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[454]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[45b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[147]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[148]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[458]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
